//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gramatica.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class gramaticaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, FMT=2, PRINTLN=3, IF=4, ELSE=5, FOR=6, RANGE=7, SWITCH=8, NIL=9, 
		CASE=10, DEFAULT=11, BREAK=12, CONTINUE=13, RETURN=14, LEN=15, APPEND=16, 
		SLICES=17, STRINGS=18, JOIN=19, INDEX=20, STRUCT=21, FUNC=22, STRCONV=23, 
		ATOI=24, PARSERFLOAT=25, REFLECT=26, TYPEOF=27, INT_TYPE=28, FLOAT64_TYPE=29, 
		STRING_TYPE=30, BOOL_TYPE=31, RUNE_TYPE=32, PUNTO=33, PARENTESIS_IZQ=34, 
		PARENTESIS_DER=35, LLAVE_IZQ=36, LLAVE_DER=37, CORCHETE_IZQ=38, CORCHETE_DER=39, 
		PUNTO_Y_COMA=40, COMA=41, DOS_PUNTOS=42, ASIGNACION=43, ASIGNACION_DECLARACION=44, 
		ASIGNACIO_INCREMENTO=45, ASIGNACIO_DECREMENTO=46, INCREMENTO=47, DECREMENTO=48, 
		PLUS=49, MINUS=50, STAR=51, DIV=52, MOD=53, IGUAL=54, DIFERENTE=55, MAYOR_QUE=56, 
		MENOR_QUE=57, MAYOR_IGUAL_QUE=58, MENOR_IGUAL_QUE=59, AND=60, OR=61, NOT=62, 
		INT_LIT=63, FLOAT_LIT=64, STRING_LIT=65, RUNE_LIT=66, IDENTIFIER=67, ESPACIO_BLANCO=68, 
		COMENTARIO_LINE=69, COMENTARIO_MULTILINEA=70;
	public const int
		RULE_program = 0, RULE_instruction = 1, RULE_conversionFunc = 2, RULE_funcDecl = 3, 
		RULE_paramsList = 4, RULE_param = 5, RULE_structDecl = 6, RULE_fieldDecl = 7, 
		RULE_structLiteral = 8, RULE_fieldValue = 9, RULE_bloque = 10, RULE_breakStmt = 11, 
		RULE_continueStmt = 12, RULE_returnStmt = 13, RULE_incDecStmt = 14, RULE_forRangeStmt = 15, 
		RULE_forStmt = 16, RULE_forWhileStmt = 17, RULE_forThreePartStmt = 18, 
		RULE_forInit = 19, RULE_forPost = 20, RULE_switchStmt = 21, RULE_caseStmt = 22, 
		RULE_defaultStmt = 23, RULE_ifStmt = 24, RULE_elseIfStmt = 25, RULE_elseStmt = 26, 
		RULE_declaracion = 27, RULE_assignacion = 28, RULE_exprStmt = 29, RULE_printStmt = 30, 
		RULE_argumentList = 31, RULE_expresionOrSliceLiteral = 32, RULE_expresion = 33, 
		RULE_logicalOrExpr = 34, RULE_logicalAndExpr = 35, RULE_equalityExpr = 36, 
		RULE_relationalExpr = 37, RULE_addExpr = 38, RULE_mulExpr = 39, RULE_unaryExpr = 40, 
		RULE_sliceFunc = 41, RULE_sliceType = 42, RULE_typeSpec = 43, RULE_sliceLiteral = 44, 
		RULE_primary = 45, RULE_functCall = 46;
	public static readonly string[] ruleNames = {
		"program", "instruction", "conversionFunc", "funcDecl", "paramsList", 
		"param", "structDecl", "fieldDecl", "structLiteral", "fieldValue", "bloque", 
		"breakStmt", "continueStmt", "returnStmt", "incDecStmt", "forRangeStmt", 
		"forStmt", "forWhileStmt", "forThreePartStmt", "forInit", "forPost", "switchStmt", 
		"caseStmt", "defaultStmt", "ifStmt", "elseIfStmt", "elseStmt", "declaracion", 
		"assignacion", "exprStmt", "printStmt", "argumentList", "expresionOrSliceLiteral", 
		"expresion", "logicalOrExpr", "logicalAndExpr", "equalityExpr", "relationalExpr", 
		"addExpr", "mulExpr", "unaryExpr", "sliceFunc", "sliceType", "typeSpec", 
		"sliceLiteral", "primary", "functCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'fmt'", "'Println'", "'if'", "'else'", "'for'", "'range'", 
		"'switch'", "'nil'", "'case'", "'default'", "'break'", "'continue'", "'return'", 
		"'len'", "'append'", "'slices'", "'strings'", "'Join'", "'Index'", "'struct'", 
		"'func'", "'strconv'", "'Atoi'", "'ParseFloat'", "'reflect'", "'TypeOf'", 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'.'", "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "';'", "','", "':'", "'='", "':='", "'+='", 
		"'-='", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "FMT", "PRINTLN", "IF", "ELSE", "FOR", "RANGE", "SWITCH", 
		"NIL", "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN", "LEN", "APPEND", 
		"SLICES", "STRINGS", "JOIN", "INDEX", "STRUCT", "FUNC", "STRCONV", "ATOI", 
		"PARSERFLOAT", "REFLECT", "TYPEOF", "INT_TYPE", "FLOAT64_TYPE", "STRING_TYPE", 
		"BOOL_TYPE", "RUNE_TYPE", "PUNTO", "PARENTESIS_IZQ", "PARENTESIS_DER", 
		"LLAVE_IZQ", "LLAVE_DER", "CORCHETE_IZQ", "CORCHETE_DER", "PUNTO_Y_COMA", 
		"COMA", "DOS_PUNTOS", "ASIGNACION", "ASIGNACION_DECLARACION", "ASIGNACIO_INCREMENTO", 
		"ASIGNACIO_DECREMENTO", "INCREMENTO", "DECREMENTO", "PLUS", "MINUS", "STAR", 
		"DIV", "MOD", "IGUAL", "DIFERENTE", "MAYOR_QUE", "MENOR_QUE", "MAYOR_IGUAL_QUE", 
		"MENOR_IGUAL_QUE", "AND", "OR", "NOT", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
		"RUNE_LIT", "IDENTIFIER", "ESPACIO_BLANCO", "COMENTARIO_LINE", "COMENTARIO_MULTILINEA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static gramaticaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public gramaticaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public gramaticaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(gramaticaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext[] structDecl() {
			return GetRuleContexts<StructDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl(int i) {
			return GetRuleContext<StructDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4610559757660982442L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) {
				{
				State = 97;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRUCT:
					{
					State = 94;
					structDecl();
					}
					break;
				case FUNC:
					{
					State = 95;
					funcDecl();
					}
					break;
				case VAR:
				case FMT:
				case IF:
				case FOR:
				case SWITCH:
				case NIL:
				case BREAK:
				case CONTINUE:
				case RETURN:
				case LEN:
				case APPEND:
				case SLICES:
				case STRINGS:
				case STRCONV:
				case REFLECT:
				case PARENTESIS_IZQ:
				case LLAVE_IZQ:
				case CORCHETE_IZQ:
				case MINUS:
				case NOT:
				case INT_LIT:
				case FLOAT_LIT:
				case STRING_LIT:
				case RUNE_LIT:
				case IDENTIFIER:
					{
					State = 96;
					instruction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion() {
			return GetRuleContext<DeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignacionContext assignacion() {
			return GetRuleContext<AssignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruction);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				declaracion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				assignacion();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				exprStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107;
				printStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				ifStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 109;
				switchStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 110;
				forStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 111;
				incDecStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 112;
				returnStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 113;
				continueStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 114;
				breakStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCONV() { return GetToken(gramaticaParser.STRCONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(gramaticaParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOI() { return GetToken(gramaticaParser.ATOI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSERFLOAT() { return GetToken(gramaticaParser.PARSERFLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFLECT() { return GetToken(gramaticaParser.REFLECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(gramaticaParser.TYPEOF, 0); }
		public ConversionFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterConversionFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitConversionFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionFuncContext conversionFunc() {
		ConversionFuncContext _localctx = new ConversionFuncContext(Context, State);
		EnterRule(_localctx, 4, RULE_conversionFunc);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				Match(STRCONV);
				State = 118;
				Match(PUNTO);
				State = 119;
				Match(ATOI);
				State = 120;
				Match(PARENTESIS_IZQ);
				State = 121;
				expresion();
				State = 122;
				Match(PARENTESIS_DER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				Match(STRCONV);
				State = 125;
				Match(PUNTO);
				State = 126;
				Match(PARSERFLOAT);
				State = 127;
				Match(PARENTESIS_IZQ);
				State = 128;
				expresion();
				State = 129;
				Match(PARENTESIS_DER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				Match(REFLECT);
				State = 132;
				Match(PUNTO);
				State = 133;
				Match(TYPEOF);
				State = 134;
				Match(PARENTESIS_IZQ);
				State = 135;
				expresion();
				State = 136;
				Match(PARENTESIS_DER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(gramaticaParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARENTESIS_IZQ() { return GetTokens(gramaticaParser.PARENTESIS_IZQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ(int i) {
			return GetToken(gramaticaParser.PARENTESIS_IZQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARENTESIS_DER() { return GetTokens(gramaticaParser.PARENTESIS_DER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER(int i) {
			return GetToken(gramaticaParser.PARENTESIS_DER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsListContext paramsList() {
			return GetRuleContext<ParamsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcDecl);
		int _la;
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(FUNC);
				State = 141;
				Match(IDENTIFIER);
				State = 142;
				Match(PARENTESIS_IZQ);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 143;
					paramsList();
					}
				}

				State = 146;
				Match(PARENTESIS_DER);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 549755814943L) != 0)) {
					{
					State = 147;
					typeSpec();
					}
				}

				State = 150;
				bloque();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				Match(FUNC);
				State = 152;
				Match(PARENTESIS_IZQ);
				State = 153;
				Match(IDENTIFIER);
				State = 154;
				Match(IDENTIFIER);
				State = 155;
				Match(PARENTESIS_DER);
				State = 156;
				Match(IDENTIFIER);
				State = 157;
				Match(PARENTESIS_IZQ);
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 158;
					paramsList();
					}
				}

				State = 161;
				Match(PARENTESIS_DER);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 549755814943L) != 0)) {
					{
					State = 162;
					typeSpec();
					}
				}

				State = 165;
				bloque();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public ParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterParamsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitParamsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsListContext paramsList() {
		ParamsListContext _localctx = new ParamsListContext(Context, State);
		EnterRule(_localctx, 8, RULE_paramsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			param();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 169;
				Match(COMA);
				State = 170;
				param();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 10, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(IDENTIFIER);
			State = 177;
			typeSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(gramaticaParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext[] fieldDecl() {
			return GetRuleContexts<FieldDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext fieldDecl(int i) {
			return GetRuleContext<FieldDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(STRUCT);
			State = 180;
			Match(IDENTIFIER);
			State = 181;
			Match(LLAVE_IZQ);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 182;
				fieldDecl();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 549755814943L) != 0) );
			State = 187;
			Match(LLAVE_DER);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 188;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			typeSpec();
			State = 192;
			Match(IDENTIFIER);
			State = 193;
			Match(PUNTO_Y_COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext[] fieldValue() {
			return GetRuleContexts<FieldValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext fieldValue(int i) {
			return GetRuleContext<FieldValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public StructLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructLiteralContext structLiteral() {
		StructLiteralContext _localctx = new StructLiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_structLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(LLAVE_IZQ);
			State = 196;
			fieldValue();
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 197;
					Match(COMA);
					State = 198;
					fieldValue();
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMA) {
				{
				State = 204;
				Match(COMA);
				}
			}

			State = 207;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOS_PUNTOS() { return GetToken(gramaticaParser.DOS_PUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFieldValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFieldValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldValueContext fieldValue() {
		FieldValueContext _localctx = new FieldValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(IDENTIFIER);
			State = 210;
			Match(DOS_PUNTOS);
			State = 211;
			expresion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public BloqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloque; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloqueContext bloque() {
		BloqueContext _localctx = new BloqueContext(Context, State);
		EnterRule(_localctx, 20, RULE_bloque);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(LLAVE_IZQ);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4610559757667273898L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) {
				{
				{
				State = 214;
				instruction();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(gramaticaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_breakStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(BREAK);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 223;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(gramaticaParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_continueStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(CONTINUE);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 227;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(gramaticaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(RETURN);
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 231;
				expresion();
				}
				break;
			}
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 234;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTO() { return GetToken(gramaticaParser.INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTO() { return GetToken(gramaticaParser.DECREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public IncDecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStmtContext incDecStmt() {
		IncDecStmtContext _localctx = new IncDecStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_incDecStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(IDENTIFIER);
			State = 238;
			_la = TokenStream.LA(1);
			if ( !(_la==INCREMENTO || _la==DECREMENTO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 239;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(gramaticaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION_DECLARACION() { return GetToken(gramaticaParser.ASIGNACION_DECLARACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(gramaticaParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA() { return GetToken(gramaticaParser.COMA, 0); }
		public ForRangeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeStmtContext forRangeStmt() {
		ForRangeStmtContext _localctx = new ForRangeStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_forRangeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(FOR);
			State = 243;
			Match(IDENTIFIER);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMA) {
				{
				State = 244;
				Match(COMA);
				State = 245;
				Match(IDENTIFIER);
				}
			}

			State = 248;
			Match(ASIGNACION_DECLARACION);
			State = 249;
			Match(RANGE);
			State = 250;
			expresion();
			State = 251;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForWhileStmtContext forWhileStmt() {
			return GetRuleContext<ForWhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForThreePartStmtContext forThreePartStmt() {
			return GetRuleContext<ForThreePartStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeStmtContext forRangeStmt() {
			return GetRuleContext<ForRangeStmtContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_forStmt);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				forWhileStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				forThreePartStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				forRangeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForWhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(gramaticaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public ForWhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forWhileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForWhileStmtContext forWhileStmt() {
		ForWhileStmtContext _localctx = new ForWhileStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_forWhileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(FOR);
			State = 259;
			expresion();
			State = 260;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForThreePartStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(gramaticaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO_Y_COMA() { return GetTokens(gramaticaParser.PUNTO_Y_COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA(int i) {
			return GetToken(gramaticaParser.PUNTO_Y_COMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForPostContext forPost() {
			return GetRuleContext<ForPostContext>(0);
		}
		public ForThreePartStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forThreePartStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForThreePartStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForThreePartStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForThreePartStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForThreePartStmtContext forThreePartStmt() {
		ForThreePartStmtContext _localctx = new ForThreePartStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_forThreePartStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(FOR);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR || _la==IDENTIFIER) {
				{
				State = 263;
				forInit();
				}
			}

			State = 266;
			Match(PUNTO_Y_COMA);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 567455752776729537L) != 0)) {
				{
				State = 267;
				expresion();
				}
			}

			State = 270;
			Match(PUNTO_Y_COMA);
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 271;
				forPost();
				}
				break;
			}
			State = 274;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignacionContext assignacion() {
			return GetRuleContext<AssignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion() {
			return GetRuleContext<DeclaracionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 38, RULE_forInit);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				assignacion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				declaracion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForPostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignacionContext assignacion() {
			return GetRuleContext<AssignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		public ForPostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forPost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForPost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForPost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForPost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForPostContext forPost() {
		ForPostContext _localctx = new ForPostContext(Context, State);
		EnterRule(_localctx, 40, RULE_forPost);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				assignacion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				exprStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282;
				incDecStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(gramaticaParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext[] caseStmt() {
			return GetRuleContexts<CaseStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt(int i) {
			return GetRuleContext<CaseStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStmtContext defaultStmt() {
			return GetRuleContext<DefaultStmtContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_switchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(SWITCH);
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 286;
				Match(PARENTESIS_IZQ);
				State = 287;
				expresion();
				State = 288;
				Match(PARENTESIS_DER);
				}
				break;
			case 2:
				{
				State = 290;
				expresion();
				}
				break;
			}
			State = 293;
			Match(LLAVE_IZQ);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 294;
				caseStmt();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 300;
				defaultStmt();
				}
			}

			State = 303;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(gramaticaParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOS_PUNTOS() { return GetToken(gramaticaParser.DOS_PUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_caseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(CASE);
			State = 306;
			expresion();
			State = 307;
			Match(DOS_PUNTOS);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4610559757667273898L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) {
				{
				{
				State = 308;
				instruction();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(gramaticaParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOS_PUNTOS() { return GetToken(gramaticaParser.DOS_PUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public DefaultStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterDefaultStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitDefaultStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStmtContext defaultStmt() {
		DefaultStmtContext _localctx = new DefaultStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_defaultStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(DEFAULT);
			State = 315;
			Match(DOS_PUNTOS);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4610559757667273898L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) {
				{
				{
				State = 316;
				instruction();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(gramaticaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStmtContext[] elseIfStmt() {
			return GetRuleContexts<ElseIfStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStmtContext elseIfStmt(int i) {
			return GetRuleContext<ElseIfStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(IF);
			{
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 323;
				Match(PARENTESIS_IZQ);
				}
				break;
			}
			State = 326;
			expresion();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTESIS_DER) {
				{
				State = 327;
				Match(PARENTESIS_DER);
				}
			}

			}
			State = 330;
			bloque();
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331;
					elseIfStmt();
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 337;
				elseStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(gramaticaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(gramaticaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		public ElseIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterElseIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitElseIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStmtContext elseIfStmt() {
		ElseIfStmtContext _localctx = new ElseIfStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_elseIfStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(ELSE);
			State = 341;
			Match(IF);
			{
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 342;
				Match(PARENTESIS_IZQ);
				}
				break;
			}
			State = 345;
			expresion();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTESIS_DER) {
				{
				State = 346;
				Match(PARENTESIS_DER);
				}
			}

			}
			State = 349;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(gramaticaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(ELSE);
			State = 352;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(gramaticaParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION() { return GetToken(gramaticaParser.ASIGNACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(gramaticaParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsListContext paramsList() {
			return GetRuleContext<ParamsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION_DECLARACION() { return GetToken(gramaticaParser.ASIGNACION_DECLARACION, 0); }
		public DeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionContext declaracion() {
		DeclaracionContext _localctx = new DeclaracionContext(Context, State);
		EnterRule(_localctx, 54, RULE_declaracion);
		int _la;
		try {
			State = 395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				Match(VAR);
				State = 355;
				Match(IDENTIFIER);
				State = 357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 356;
					typeSpec();
					}
					break;
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASIGNACION) {
					{
					State = 359;
					Match(ASIGNACION);
					State = 360;
					expresion();
					}
				}

				State = 364;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 363;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366;
				Match(IDENTIFIER);
				State = 367;
				Match(IDENTIFIER);
				State = 368;
				Match(ASIGNACION);
				State = 369;
				structLiteral();
				State = 371;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 370;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 373;
				Match(VAR);
				State = 374;
				Match(IDENTIFIER);
				State = 375;
				Match(ASIGNACION);
				State = 376;
				Match(FUNC);
				State = 377;
				Match(PARENTESIS_IZQ);
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 378;
					paramsList();
					}
				}

				State = 381;
				Match(PARENTESIS_DER);
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 549755814943L) != 0)) {
					{
					State = 382;
					typeSpec();
					}
				}

				State = 385;
				bloque();
				State = 387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 386;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 389;
				Match(IDENTIFIER);
				State = 390;
				Match(ASIGNACION_DECLARACION);
				State = 391;
				expresion();
				State = 393;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 392;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION() { return GetToken(gramaticaParser.ASIGNACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACIO_INCREMENTO() { return GetToken(gramaticaParser.ASIGNACIO_INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACIO_DECREMENTO() { return GetToken(gramaticaParser.ASIGNACIO_DECREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CORCHETE_IZQ() { return GetTokens(gramaticaParser.CORCHETE_IZQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_IZQ(int i) {
			return GetToken(gramaticaParser.CORCHETE_IZQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CORCHETE_DER() { return GetTokens(gramaticaParser.CORCHETE_DER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_DER(int i) {
			return GetToken(gramaticaParser.CORCHETE_DER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(gramaticaParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(gramaticaParser.PUNTO, i);
		}
		public AssignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterAssignacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitAssignacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignacionContext assignacion() {
		AssignacionContext _localctx = new AssignacionContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 397;
			Match(IDENTIFIER);
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CORCHETE_IZQ) {
				{
				{
				State = 398;
				Match(CORCHETE_IZQ);
				State = 399;
				expresion();
				State = 400;
				Match(CORCHETE_DER);
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PUNTO) {
				{
				{
				State = 407;
				Match(PUNTO);
				State = 408;
				Match(IDENTIFIER);
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 414;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 114349209288704L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 415;
			expresion();
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 416;
				Match(PUNTO_Y_COMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_exprStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			expresion();
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 420;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(gramaticaParser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(gramaticaParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTLN() { return GetToken(gramaticaParser.PRINTLN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(FMT);
			State = 424;
			Match(PUNTO);
			State = 425;
			Match(PRINTLN);
			State = 426;
			Match(PARENTESIS_IZQ);
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 567455752776729537L) != 0)) {
				{
				State = 427;
				argumentList();
				}
			}

			State = 430;
			Match(PARENTESIS_DER);
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 431;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 62, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			expresion();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 435;
				Match(COMA);
				State = 436;
				expresion();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionOrSliceLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceLiteralContext sliceLiteral() {
			return GetRuleContext<SliceLiteralContext>(0);
		}
		public ExpresionOrSliceLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresionOrSliceLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterExpresionOrSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitExpresionOrSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionOrSliceLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionOrSliceLiteralContext expresionOrSliceLiteral() {
		ExpresionOrSliceLiteralContext _localctx = new ExpresionOrSliceLiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_expresionOrSliceLiteral);
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 442;
				expresion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 443;
				sliceLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExprContext logicalOrExpr() {
			return GetRuleContext<LogicalOrExprContext>(0);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(Context, State);
		EnterRule(_localctx, 66, RULE_expresion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			logicalOrExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExprContext[] logicalAndExpr() {
			return GetRuleContexts<LogicalAndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExprContext logicalAndExpr(int i) {
			return GetRuleContext<LogicalAndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(gramaticaParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(gramaticaParser.OR, i);
		}
		public LogicalOrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExprContext logicalOrExpr() {
		LogicalOrExprContext _localctx = new LogicalOrExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_logicalOrExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			logicalAndExpr();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 449;
				Match(OR);
				State = 450;
				logicalAndExpr();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(gramaticaParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(gramaticaParser.AND, i);
		}
		public LogicalAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExprContext logicalAndExpr() {
		LogicalAndExprContext _localctx = new LogicalAndExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_logicalAndExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			equalityExpr();
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 457;
				Match(AND);
				State = 458;
				equalityExpr();
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGUAL() { return GetTokens(gramaticaParser.IGUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL(int i) {
			return GetToken(gramaticaParser.IGUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIFERENTE() { return GetTokens(gramaticaParser.DIFERENTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFERENTE(int i) {
			return GetToken(gramaticaParser.DIFERENTE, i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_equalityExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			relationalExpr();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGUAL || _la==DIFERENTE) {
				{
				{
				State = 465;
				_la = TokenStream.LA(1);
				if ( !(_la==IGUAL || _la==DIFERENTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 466;
				relationalExpr();
				}
				}
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAYOR_QUE() { return GetTokens(gramaticaParser.MAYOR_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR_QUE(int i) {
			return GetToken(gramaticaParser.MAYOR_QUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MENOR_QUE() { return GetTokens(gramaticaParser.MENOR_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR_QUE(int i) {
			return GetToken(gramaticaParser.MENOR_QUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAYOR_IGUAL_QUE() { return GetTokens(gramaticaParser.MAYOR_IGUAL_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR_IGUAL_QUE(int i) {
			return GetToken(gramaticaParser.MAYOR_IGUAL_QUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MENOR_IGUAL_QUE() { return GetTokens(gramaticaParser.MENOR_IGUAL_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR_IGUAL_QUE(int i) {
			return GetToken(gramaticaParser.MENOR_IGUAL_QUE, i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_relationalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			addExpr();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1080863910568919040L) != 0)) {
				{
				{
				State = 473;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1080863910568919040L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 474;
				addExpr();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(gramaticaParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(gramaticaParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(gramaticaParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(gramaticaParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 76, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			mulExpr();
			State = 485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 481;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 482;
					mulExpr();
					}
					} 
				}
				State = 487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(gramaticaParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(gramaticaParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(gramaticaParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(gramaticaParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(gramaticaParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(gramaticaParser.MOD, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 78, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			unaryExpr();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762598695796736L) != 0)) {
				{
				{
				State = 489;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762598695796736L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 490;
				unaryExpr();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(gramaticaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(gramaticaParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceFuncContext sliceFunc() {
			return GetRuleContext<SliceFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionFuncContext conversionFunc() {
			return GetRuleContext<ConversionFuncContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 80, RULE_unaryExpr);
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 496;
				Match(MINUS);
				State = 497;
				unaryExpr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498;
				Match(NOT);
				State = 499;
				unaryExpr();
				}
				break;
			case NIL:
			case PARENTESIS_IZQ:
			case LLAVE_IZQ:
			case CORCHETE_IZQ:
			case INT_LIT:
			case FLOAT_LIT:
			case STRING_LIT:
			case RUNE_LIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 500;
				primary();
				}
				break;
			case LEN:
			case APPEND:
			case SLICES:
			case STRINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 501;
				sliceFunc();
				}
				break;
			case STRCONV:
			case REFLECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 502;
				conversionFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(gramaticaParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPEND() { return GetToken(gramaticaParser.APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICES() { return GetToken(gramaticaParser.SLICES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(gramaticaParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(gramaticaParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGS() { return GetToken(gramaticaParser.STRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(gramaticaParser.JOIN, 0); }
		public SliceFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSliceFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSliceFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceFuncContext sliceFunc() {
		SliceFuncContext _localctx = new SliceFuncContext(Context, State);
		EnterRule(_localctx, 82, RULE_sliceFunc);
		int _la;
		try {
			State = 540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505;
				Match(LEN);
				State = 506;
				Match(PARENTESIS_IZQ);
				State = 507;
				expresion();
				State = 508;
				Match(PARENTESIS_DER);
				}
				break;
			case APPEND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				Match(APPEND);
				State = 511;
				Match(PARENTESIS_IZQ);
				State = 512;
				expresion();
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 513;
					Match(COMA);
					State = 514;
					expresion();
					}
					}
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 520;
				Match(PARENTESIS_DER);
				}
				break;
			case SLICES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				Match(SLICES);
				State = 523;
				Match(PUNTO);
				State = 524;
				Match(INDEX);
				State = 525;
				Match(PARENTESIS_IZQ);
				State = 526;
				expresion();
				State = 527;
				Match(COMA);
				State = 528;
				expresion();
				State = 529;
				Match(PARENTESIS_DER);
				}
				break;
			case STRINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 531;
				Match(STRINGS);
				State = 532;
				Match(PUNTO);
				State = 533;
				Match(JOIN);
				State = 534;
				Match(PARENTESIS_IZQ);
				State = 535;
				expresion();
				State = 536;
				Match(COMA);
				State = 537;
				expresion();
				State = 538;
				Match(PARENTESIS_DER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_IZQ() { return GetToken(gramaticaParser.CORCHETE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_DER() { return GetToken(gramaticaParser.CORCHETE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(CORCHETE_IZQ);
			State = 543;
			Match(CORCHETE_DER);
			State = 544;
			typeSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(gramaticaParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT64_TYPE() { return GetToken(gramaticaParser.FLOAT64_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(gramaticaParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(gramaticaParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_TYPE() { return GetToken(gramaticaParser.RUNE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeSpec);
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546;
				Match(INT_TYPE);
				}
				break;
			case FLOAT64_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547;
				Match(FLOAT64_TYPE);
				}
				break;
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 548;
				Match(STRING_TYPE);
				}
				break;
			case BOOL_TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 549;
				Match(BOOL_TYPE);
				}
				break;
			case RUNE_TYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 550;
				Match(RUNE_TYPE);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 551;
				Match(IDENTIFIER);
				}
				break;
			case CORCHETE_IZQ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 552;
				sliceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionOrSliceLiteralContext[] expresionOrSliceLiteral() {
			return GetRuleContexts<ExpresionOrSliceLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionOrSliceLiteralContext expresionOrSliceLiteral(int i) {
			return GetRuleContext<ExpresionOrSliceLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public SliceLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceLiteralContext sliceLiteral() {
		SliceLiteralContext _localctx = new SliceLiteralContext(Context, State);
		EnterRule(_localctx, 88, RULE_sliceLiteral);
		int _la;
		try {
			int _alt;
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CORCHETE_IZQ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555;
				sliceType();
				State = 556;
				Match(LLAVE_IZQ);
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 567455752776729537L) != 0)) {
					{
					State = 557;
					expresionOrSliceLiteral();
					State = 562;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 558;
							Match(COMA);
							State = 559;
							expresionOrSliceLiteral();
							}
							} 
						}
						State = 564;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
					}
					State = 566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMA) {
						{
						State = 565;
						Match(COMA);
						}
					}

					}
				}

				State = 570;
				Match(LLAVE_DER);
				}
				break;
			case LLAVE_IZQ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				Match(LLAVE_IZQ);
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 567455752776729537L) != 0)) {
					{
					State = 573;
					expresionOrSliceLiteral();
					State = 578;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 574;
							Match(COMA);
							State = 575;
							expresionOrSliceLiteral();
							}
							} 
						}
						State = 580;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
					}
					State = 582;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMA) {
						{
						State = 581;
						Match(COMA);
						}
					}

					}
				}

				State = 586;
				Match(LLAVE_DER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctCallContext functCall() {
			return GetRuleContext<FunctCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CORCHETE_IZQ() { return GetTokens(gramaticaParser.CORCHETE_IZQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_IZQ(int i) {
			return GetToken(gramaticaParser.CORCHETE_IZQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CORCHETE_DER() { return GetTokens(gramaticaParser.CORCHETE_DER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_DER(int i) {
			return GetToken(gramaticaParser.CORCHETE_DER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(gramaticaParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(gramaticaParser.PUNTO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LIT() { return GetToken(gramaticaParser.INT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(gramaticaParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(gramaticaParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(gramaticaParser.RUNE_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(gramaticaParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SliceLiteralContext sliceLiteral() {
			return GetRuleContext<SliceLiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 90, RULE_primary);
		int _la;
		try {
			int _alt;
			State = 617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589;
				functCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590;
				Match(IDENTIFIER);
				State = 597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 591;
						Match(CORCHETE_IZQ);
						State = 592;
						expresion();
						State = 593;
						Match(CORCHETE_DER);
						}
						} 
					}
					State = 599;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				}
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PUNTO) {
					{
					{
					State = 600;
					Match(PUNTO);
					State = 601;
					Match(IDENTIFIER);
					}
					}
					State = 606;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 607;
				Match(INT_LIT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 608;
				Match(FLOAT_LIT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 609;
				Match(STRING_LIT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 610;
				Match(RUNE_LIT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 611;
				Match(NIL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 612;
				Match(PARENTESIS_IZQ);
				State = 613;
				expresion();
				State = 614;
				Match(PARENTESIS_DER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 616;
				sliceLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(gramaticaParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(gramaticaParser.PUNTO, i);
		}
		public FunctCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFunctCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFunctCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctCallContext functCall() {
		FunctCallContext _localctx = new FunctCallContext(Context, State);
		EnterRule(_localctx, 92, RULE_functCall);
		int _la;
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(IDENTIFIER);
				State = 620;
				Match(PARENTESIS_IZQ);
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 567455752776729537L) != 0)) {
					{
					State = 621;
					argumentList();
					}
				}

				State = 624;
				Match(PARENTESIS_DER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625;
				Match(IDENTIFIER);
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 626;
					Match(PUNTO);
					State = 627;
					Match(IDENTIFIER);
					}
					}
					State = 630;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PUNTO );
				State = 632;
				Match(PARENTESIS_IZQ);
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 567455752776729537L) != 0)) {
					{
					State = 633;
					argumentList();
					}
				}

				State = 636;
				Match(PARENTESIS_DER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,70,640,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,5,0,98,8,0,10,0,12,
		0,101,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,116,
		8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,139,8,2,1,3,1,3,1,3,1,3,3,3,145,8,3,1,3,1,3,3,3,
		149,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,160,8,3,1,3,1,3,3,3,164,
		8,3,1,3,3,3,167,8,3,1,4,1,4,1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,5,1,5,
		1,5,1,6,1,6,1,6,1,6,4,6,184,8,6,11,6,12,6,185,1,6,1,6,3,6,190,8,6,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,200,8,8,10,8,12,8,203,9,8,1,8,3,8,206,
		8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,5,10,216,8,10,10,10,12,10,219,9,
		10,1,10,1,10,1,11,1,11,3,11,225,8,11,1,12,1,12,3,12,229,8,12,1,13,1,13,
		3,13,233,8,13,1,13,3,13,236,8,13,1,14,1,14,1,14,3,14,241,8,14,1,15,1,15,
		1,15,1,15,3,15,247,8,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,257,
		8,16,1,17,1,17,1,17,1,17,1,18,1,18,3,18,265,8,18,1,18,1,18,3,18,269,8,
		18,1,18,1,18,3,18,273,8,18,1,18,1,18,1,19,1,19,3,19,279,8,19,1,20,1,20,
		1,20,3,20,284,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,292,8,21,1,21,1,
		21,5,21,296,8,21,10,21,12,21,299,9,21,1,21,3,21,302,8,21,1,21,1,21,1,22,
		1,22,1,22,1,22,5,22,310,8,22,10,22,12,22,313,9,22,1,23,1,23,1,23,5,23,
		318,8,23,10,23,12,23,321,9,23,1,24,1,24,3,24,325,8,24,1,24,1,24,3,24,329,
		8,24,1,24,1,24,5,24,333,8,24,10,24,12,24,336,9,24,1,24,3,24,339,8,24,1,
		25,1,25,1,25,3,25,344,8,25,1,25,1,25,3,25,348,8,25,1,25,1,25,1,26,1,26,
		1,26,1,27,1,27,1,27,3,27,358,8,27,1,27,1,27,3,27,362,8,27,1,27,3,27,365,
		8,27,1,27,1,27,1,27,1,27,1,27,3,27,372,8,27,1,27,1,27,1,27,1,27,1,27,1,
		27,3,27,380,8,27,1,27,1,27,3,27,384,8,27,1,27,1,27,3,27,388,8,27,1,27,
		1,27,1,27,1,27,3,27,394,8,27,3,27,396,8,27,1,28,1,28,1,28,1,28,1,28,5,
		28,403,8,28,10,28,12,28,406,9,28,1,28,1,28,5,28,410,8,28,10,28,12,28,413,
		9,28,1,28,1,28,1,28,3,28,418,8,28,1,29,1,29,3,29,422,8,29,1,30,1,30,1,
		30,1,30,1,30,3,30,429,8,30,1,30,1,30,3,30,433,8,30,1,31,1,31,1,31,5,31,
		438,8,31,10,31,12,31,441,9,31,1,32,1,32,3,32,445,8,32,1,33,1,33,1,34,1,
		34,1,34,5,34,452,8,34,10,34,12,34,455,9,34,1,35,1,35,1,35,5,35,460,8,35,
		10,35,12,35,463,9,35,1,36,1,36,1,36,5,36,468,8,36,10,36,12,36,471,9,36,
		1,37,1,37,1,37,5,37,476,8,37,10,37,12,37,479,9,37,1,38,1,38,1,38,5,38,
		484,8,38,10,38,12,38,487,9,38,1,39,1,39,1,39,5,39,492,8,39,10,39,12,39,
		495,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,504,8,40,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,516,8,41,10,41,12,41,519,9,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,541,8,41,1,42,1,42,1,42,1,42,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,554,8,43,1,44,1,44,1,44,1,44,1,44,5,
		44,561,8,44,10,44,12,44,564,9,44,1,44,3,44,567,8,44,3,44,569,8,44,1,44,
		1,44,1,44,1,44,1,44,1,44,5,44,577,8,44,10,44,12,44,580,9,44,1,44,3,44,
		583,8,44,3,44,585,8,44,1,44,3,44,588,8,44,1,45,1,45,1,45,1,45,1,45,1,45,
		5,45,596,8,45,10,45,12,45,599,9,45,1,45,1,45,5,45,603,8,45,10,45,12,45,
		606,9,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,618,8,
		45,1,46,1,46,1,46,3,46,623,8,46,1,46,1,46,1,46,1,46,4,46,629,8,46,11,46,
		12,46,630,1,46,1,46,3,46,635,8,46,1,46,3,46,638,8,46,1,46,0,0,47,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,0,6,1,0,47,
		48,2,0,43,43,45,46,1,0,54,55,1,0,56,59,1,0,49,50,1,0,51,53,703,0,99,1,
		0,0,0,2,115,1,0,0,0,4,138,1,0,0,0,6,166,1,0,0,0,8,168,1,0,0,0,10,176,1,
		0,0,0,12,179,1,0,0,0,14,191,1,0,0,0,16,195,1,0,0,0,18,209,1,0,0,0,20,213,
		1,0,0,0,22,222,1,0,0,0,24,226,1,0,0,0,26,230,1,0,0,0,28,237,1,0,0,0,30,
		242,1,0,0,0,32,256,1,0,0,0,34,258,1,0,0,0,36,262,1,0,0,0,38,278,1,0,0,
		0,40,283,1,0,0,0,42,285,1,0,0,0,44,305,1,0,0,0,46,314,1,0,0,0,48,322,1,
		0,0,0,50,340,1,0,0,0,52,351,1,0,0,0,54,395,1,0,0,0,56,397,1,0,0,0,58,419,
		1,0,0,0,60,423,1,0,0,0,62,434,1,0,0,0,64,444,1,0,0,0,66,446,1,0,0,0,68,
		448,1,0,0,0,70,456,1,0,0,0,72,464,1,0,0,0,74,472,1,0,0,0,76,480,1,0,0,
		0,78,488,1,0,0,0,80,503,1,0,0,0,82,540,1,0,0,0,84,542,1,0,0,0,86,553,1,
		0,0,0,88,587,1,0,0,0,90,617,1,0,0,0,92,637,1,0,0,0,94,98,3,12,6,0,95,98,
		3,6,3,0,96,98,3,2,1,0,97,94,1,0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,98,101,
		1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,
		103,5,0,0,1,103,1,1,0,0,0,104,116,3,54,27,0,105,116,3,56,28,0,106,116,
		3,58,29,0,107,116,3,60,30,0,108,116,3,48,24,0,109,116,3,42,21,0,110,116,
		3,32,16,0,111,116,3,28,14,0,112,116,3,26,13,0,113,116,3,24,12,0,114,116,
		3,22,11,0,115,104,1,0,0,0,115,105,1,0,0,0,115,106,1,0,0,0,115,107,1,0,
		0,0,115,108,1,0,0,0,115,109,1,0,0,0,115,110,1,0,0,0,115,111,1,0,0,0,115,
		112,1,0,0,0,115,113,1,0,0,0,115,114,1,0,0,0,116,3,1,0,0,0,117,118,5,23,
		0,0,118,119,5,33,0,0,119,120,5,24,0,0,120,121,5,34,0,0,121,122,3,66,33,
		0,122,123,5,35,0,0,123,139,1,0,0,0,124,125,5,23,0,0,125,126,5,33,0,0,126,
		127,5,25,0,0,127,128,5,34,0,0,128,129,3,66,33,0,129,130,5,35,0,0,130,139,
		1,0,0,0,131,132,5,26,0,0,132,133,5,33,0,0,133,134,5,27,0,0,134,135,5,34,
		0,0,135,136,3,66,33,0,136,137,5,35,0,0,137,139,1,0,0,0,138,117,1,0,0,0,
		138,124,1,0,0,0,138,131,1,0,0,0,139,5,1,0,0,0,140,141,5,22,0,0,141,142,
		5,67,0,0,142,144,5,34,0,0,143,145,3,8,4,0,144,143,1,0,0,0,144,145,1,0,
		0,0,145,146,1,0,0,0,146,148,5,35,0,0,147,149,3,86,43,0,148,147,1,0,0,0,
		148,149,1,0,0,0,149,150,1,0,0,0,150,167,3,20,10,0,151,152,5,22,0,0,152,
		153,5,34,0,0,153,154,5,67,0,0,154,155,5,67,0,0,155,156,5,35,0,0,156,157,
		5,67,0,0,157,159,5,34,0,0,158,160,3,8,4,0,159,158,1,0,0,0,159,160,1,0,
		0,0,160,161,1,0,0,0,161,163,5,35,0,0,162,164,3,86,43,0,163,162,1,0,0,0,
		163,164,1,0,0,0,164,165,1,0,0,0,165,167,3,20,10,0,166,140,1,0,0,0,166,
		151,1,0,0,0,167,7,1,0,0,0,168,173,3,10,5,0,169,170,5,41,0,0,170,172,3,
		10,5,0,171,169,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,
		174,9,1,0,0,0,175,173,1,0,0,0,176,177,5,67,0,0,177,178,3,86,43,0,178,11,
		1,0,0,0,179,180,5,21,0,0,180,181,5,67,0,0,181,183,5,36,0,0,182,184,3,14,
		7,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
		187,1,0,0,0,187,189,5,37,0,0,188,190,5,40,0,0,189,188,1,0,0,0,189,190,
		1,0,0,0,190,13,1,0,0,0,191,192,3,86,43,0,192,193,5,67,0,0,193,194,5,40,
		0,0,194,15,1,0,0,0,195,196,5,36,0,0,196,201,3,18,9,0,197,198,5,41,0,0,
		198,200,3,18,9,0,199,197,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,
		1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,204,206,5,41,0,0,205,204,1,0,0,
		0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,5,37,0,0,208,17,1,0,0,0,209,
		210,5,67,0,0,210,211,5,42,0,0,211,212,3,66,33,0,212,19,1,0,0,0,213,217,
		5,36,0,0,214,216,3,2,1,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,
		0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,37,0,0,221,
		21,1,0,0,0,222,224,5,12,0,0,223,225,5,40,0,0,224,223,1,0,0,0,224,225,1,
		0,0,0,225,23,1,0,0,0,226,228,5,13,0,0,227,229,5,40,0,0,228,227,1,0,0,0,
		228,229,1,0,0,0,229,25,1,0,0,0,230,232,5,14,0,0,231,233,3,66,33,0,232,
		231,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,236,5,40,0,0,235,234,1,
		0,0,0,235,236,1,0,0,0,236,27,1,0,0,0,237,238,5,67,0,0,238,240,7,0,0,0,
		239,241,5,40,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,29,1,0,0,0,242,243,
		5,6,0,0,243,246,5,67,0,0,244,245,5,41,0,0,245,247,5,67,0,0,246,244,1,0,
		0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,44,0,0,249,250,5,7,0,0,250,
		251,3,66,33,0,251,252,3,20,10,0,252,31,1,0,0,0,253,257,3,34,17,0,254,257,
		3,36,18,0,255,257,3,30,15,0,256,253,1,0,0,0,256,254,1,0,0,0,256,255,1,
		0,0,0,257,33,1,0,0,0,258,259,5,6,0,0,259,260,3,66,33,0,260,261,3,20,10,
		0,261,35,1,0,0,0,262,264,5,6,0,0,263,265,3,38,19,0,264,263,1,0,0,0,264,
		265,1,0,0,0,265,266,1,0,0,0,266,268,5,40,0,0,267,269,3,66,33,0,268,267,
		1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,272,5,40,0,0,271,273,3,40,
		20,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,3,20,10,0,
		275,37,1,0,0,0,276,279,3,56,28,0,277,279,3,54,27,0,278,276,1,0,0,0,278,
		277,1,0,0,0,279,39,1,0,0,0,280,284,3,56,28,0,281,284,3,58,29,0,282,284,
		3,28,14,0,283,280,1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,41,1,0,0,
		0,285,291,5,8,0,0,286,287,5,34,0,0,287,288,3,66,33,0,288,289,5,35,0,0,
		289,292,1,0,0,0,290,292,3,66,33,0,291,286,1,0,0,0,291,290,1,0,0,0,292,
		293,1,0,0,0,293,297,5,36,0,0,294,296,3,44,22,0,295,294,1,0,0,0,296,299,
		1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,
		0,300,302,3,46,23,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,
		304,5,37,0,0,304,43,1,0,0,0,305,306,5,10,0,0,306,307,3,66,33,0,307,311,
		5,42,0,0,308,310,3,2,1,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,
		0,311,312,1,0,0,0,312,45,1,0,0,0,313,311,1,0,0,0,314,315,5,11,0,0,315,
		319,5,42,0,0,316,318,3,2,1,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,
		0,0,0,319,320,1,0,0,0,320,47,1,0,0,0,321,319,1,0,0,0,322,324,5,4,0,0,323,
		325,5,34,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,3,
		66,33,0,327,329,5,35,0,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,
		0,330,334,3,20,10,0,331,333,3,50,25,0,332,331,1,0,0,0,333,336,1,0,0,0,
		334,332,1,0,0,0,334,335,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,337,339,
		3,52,26,0,338,337,1,0,0,0,338,339,1,0,0,0,339,49,1,0,0,0,340,341,5,5,0,
		0,341,343,5,4,0,0,342,344,5,34,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,
		345,1,0,0,0,345,347,3,66,33,0,346,348,5,35,0,0,347,346,1,0,0,0,347,348,
		1,0,0,0,348,349,1,0,0,0,349,350,3,20,10,0,350,51,1,0,0,0,351,352,5,5,0,
		0,352,353,3,20,10,0,353,53,1,0,0,0,354,355,5,1,0,0,355,357,5,67,0,0,356,
		358,3,86,43,0,357,356,1,0,0,0,357,358,1,0,0,0,358,361,1,0,0,0,359,360,
		5,43,0,0,360,362,3,66,33,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,
		0,0,363,365,5,40,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,396,1,0,0,0,366,
		367,5,67,0,0,367,368,5,67,0,0,368,369,5,43,0,0,369,371,3,16,8,0,370,372,
		5,40,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,396,1,0,0,0,373,374,5,1,0,
		0,374,375,5,67,0,0,375,376,5,43,0,0,376,377,5,22,0,0,377,379,5,34,0,0,
		378,380,3,8,4,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,383,
		5,35,0,0,382,384,3,86,43,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,
		0,0,385,387,3,20,10,0,386,388,5,40,0,0,387,386,1,0,0,0,387,388,1,0,0,0,
		388,396,1,0,0,0,389,390,5,67,0,0,390,391,5,44,0,0,391,393,3,66,33,0,392,
		394,5,40,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,354,1,
		0,0,0,395,366,1,0,0,0,395,373,1,0,0,0,395,389,1,0,0,0,396,55,1,0,0,0,397,
		404,5,67,0,0,398,399,5,38,0,0,399,400,3,66,33,0,400,401,5,39,0,0,401,403,
		1,0,0,0,402,398,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,
		0,405,411,1,0,0,0,406,404,1,0,0,0,407,408,5,33,0,0,408,410,5,67,0,0,409,
		407,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,
		0,0,0,413,411,1,0,0,0,414,415,7,1,0,0,415,417,3,66,33,0,416,418,5,40,0,
		0,417,416,1,0,0,0,417,418,1,0,0,0,418,57,1,0,0,0,419,421,3,66,33,0,420,
		422,5,40,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,59,1,0,0,0,423,424,5,
		2,0,0,424,425,5,33,0,0,425,426,5,3,0,0,426,428,5,34,0,0,427,429,3,62,31,
		0,428,427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,432,5,35,0,0,431,
		433,5,40,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,61,1,0,0,0,434,439,3,
		66,33,0,435,436,5,41,0,0,436,438,3,66,33,0,437,435,1,0,0,0,438,441,1,0,
		0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,63,1,0,0,0,441,439,1,0,0,0,442,
		445,3,66,33,0,443,445,3,88,44,0,444,442,1,0,0,0,444,443,1,0,0,0,445,65,
		1,0,0,0,446,447,3,68,34,0,447,67,1,0,0,0,448,453,3,70,35,0,449,450,5,61,
		0,0,450,452,3,70,35,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,
		453,454,1,0,0,0,454,69,1,0,0,0,455,453,1,0,0,0,456,461,3,72,36,0,457,458,
		5,60,0,0,458,460,3,72,36,0,459,457,1,0,0,0,460,463,1,0,0,0,461,459,1,0,
		0,0,461,462,1,0,0,0,462,71,1,0,0,0,463,461,1,0,0,0,464,469,3,74,37,0,465,
		466,7,2,0,0,466,468,3,74,37,0,467,465,1,0,0,0,468,471,1,0,0,0,469,467,
		1,0,0,0,469,470,1,0,0,0,470,73,1,0,0,0,471,469,1,0,0,0,472,477,3,76,38,
		0,473,474,7,3,0,0,474,476,3,76,38,0,475,473,1,0,0,0,476,479,1,0,0,0,477,
		475,1,0,0,0,477,478,1,0,0,0,478,75,1,0,0,0,479,477,1,0,0,0,480,485,3,78,
		39,0,481,482,7,4,0,0,482,484,3,78,39,0,483,481,1,0,0,0,484,487,1,0,0,0,
		485,483,1,0,0,0,485,486,1,0,0,0,486,77,1,0,0,0,487,485,1,0,0,0,488,493,
		3,80,40,0,489,490,7,5,0,0,490,492,3,80,40,0,491,489,1,0,0,0,492,495,1,
		0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,79,1,0,0,0,495,493,1,0,0,0,496,
		497,5,50,0,0,497,504,3,80,40,0,498,499,5,62,0,0,499,504,3,80,40,0,500,
		504,3,90,45,0,501,504,3,82,41,0,502,504,3,4,2,0,503,496,1,0,0,0,503,498,
		1,0,0,0,503,500,1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,81,1,0,0,0,
		505,506,5,15,0,0,506,507,5,34,0,0,507,508,3,66,33,0,508,509,5,35,0,0,509,
		541,1,0,0,0,510,511,5,16,0,0,511,512,5,34,0,0,512,517,3,66,33,0,513,514,
		5,41,0,0,514,516,3,66,33,0,515,513,1,0,0,0,516,519,1,0,0,0,517,515,1,0,
		0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,521,5,35,0,0,521,
		541,1,0,0,0,522,523,5,17,0,0,523,524,5,33,0,0,524,525,5,20,0,0,525,526,
		5,34,0,0,526,527,3,66,33,0,527,528,5,41,0,0,528,529,3,66,33,0,529,530,
		5,35,0,0,530,541,1,0,0,0,531,532,5,18,0,0,532,533,5,33,0,0,533,534,5,19,
		0,0,534,535,5,34,0,0,535,536,3,66,33,0,536,537,5,41,0,0,537,538,3,66,33,
		0,538,539,5,35,0,0,539,541,1,0,0,0,540,505,1,0,0,0,540,510,1,0,0,0,540,
		522,1,0,0,0,540,531,1,0,0,0,541,83,1,0,0,0,542,543,5,38,0,0,543,544,5,
		39,0,0,544,545,3,86,43,0,545,85,1,0,0,0,546,554,5,28,0,0,547,554,5,29,
		0,0,548,554,5,30,0,0,549,554,5,31,0,0,550,554,5,32,0,0,551,554,5,67,0,
		0,552,554,3,84,42,0,553,546,1,0,0,0,553,547,1,0,0,0,553,548,1,0,0,0,553,
		549,1,0,0,0,553,550,1,0,0,0,553,551,1,0,0,0,553,552,1,0,0,0,554,87,1,0,
		0,0,555,556,3,84,42,0,556,568,5,36,0,0,557,562,3,64,32,0,558,559,5,41,
		0,0,559,561,3,64,32,0,560,558,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,
		562,563,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,565,567,5,41,0,0,566,565,
		1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,557,1,0,0,0,568,569,1,0,0,
		0,569,570,1,0,0,0,570,571,5,37,0,0,571,588,1,0,0,0,572,584,5,36,0,0,573,
		578,3,64,32,0,574,575,5,41,0,0,575,577,3,64,32,0,576,574,1,0,0,0,577,580,
		1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,
		0,581,583,5,41,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,
		573,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,5,37,0,0,587,555,1,
		0,0,0,587,572,1,0,0,0,588,89,1,0,0,0,589,618,3,92,46,0,590,597,5,67,0,
		0,591,592,5,38,0,0,592,593,3,66,33,0,593,594,5,39,0,0,594,596,1,0,0,0,
		595,591,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,604,
		1,0,0,0,599,597,1,0,0,0,600,601,5,33,0,0,601,603,5,67,0,0,602,600,1,0,
		0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,618,1,0,0,0,606,
		604,1,0,0,0,607,618,5,63,0,0,608,618,5,64,0,0,609,618,5,65,0,0,610,618,
		5,66,0,0,611,618,5,9,0,0,612,613,5,34,0,0,613,614,3,66,33,0,614,615,5,
		35,0,0,615,618,1,0,0,0,616,618,3,88,44,0,617,589,1,0,0,0,617,590,1,0,0,
		0,617,607,1,0,0,0,617,608,1,0,0,0,617,609,1,0,0,0,617,610,1,0,0,0,617,
		611,1,0,0,0,617,612,1,0,0,0,617,616,1,0,0,0,618,91,1,0,0,0,619,620,5,67,
		0,0,620,622,5,34,0,0,621,623,3,62,31,0,622,621,1,0,0,0,622,623,1,0,0,0,
		623,624,1,0,0,0,624,638,5,35,0,0,625,628,5,67,0,0,626,627,5,33,0,0,627,
		629,5,67,0,0,628,626,1,0,0,0,629,630,1,0,0,0,630,628,1,0,0,0,630,631,1,
		0,0,0,631,632,1,0,0,0,632,634,5,34,0,0,633,635,3,62,31,0,634,633,1,0,0,
		0,634,635,1,0,0,0,635,636,1,0,0,0,636,638,5,35,0,0,637,619,1,0,0,0,637,
		625,1,0,0,0,638,93,1,0,0,0,79,97,99,115,138,144,148,159,163,166,173,185,
		189,201,205,217,224,228,232,235,240,246,256,264,268,272,278,283,291,297,
		301,311,319,324,328,334,338,343,347,357,361,364,371,379,383,387,393,395,
		404,411,417,421,428,432,439,444,453,461,469,477,485,493,503,517,540,553,
		562,566,568,578,582,584,587,597,604,617,622,630,634,637
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
