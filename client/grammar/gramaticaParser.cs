//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gramatica.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class gramaticaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, FMT=2, PRINTLN=3, IF=4, ELSE=5, FOR=6, SWITCH=7, CASE=8, DEFAULT=9, 
		BREAK=10, CONTINUE=11, RETURN=12, LEN=13, APPEND=14, SLICES=15, STRINGS=16, 
		JOIN=17, INDEX=18, STRUCT=19, FUNC=20, STRCONV=21, ATOI=22, PARSERFLOAT=23, 
		REFLECT=24, TYPEOF=25, INT_TYPE=26, FLOAT64_TYPE=27, STRING_TYPE=28, BOOL_TYPE=29, 
		RUNE_TYPE=30, PUNTO=31, PARENTESIS_IZQ=32, PARENTESIS_DER=33, LLAVE_IZQ=34, 
		LLAVE_DER=35, CORCHETE_IZQ=36, CORCHETE_DER=37, PUNTO_Y_COMA=38, COMA=39, 
		DOS_PUNTOS=40, ASIGNACION=41, ASIGNACION_DECLARACION=42, ASIGNACIO_INCREMENTO=43, 
		ASIGNACIO_DECREMENTO=44, INCREMENTO=45, DECREMENTO=46, PLUS=47, MINUS=48, 
		STAR=49, DIV=50, MOD=51, IGUAL=52, DIFERENTE=53, MAYOR_QUE=54, MENOR_QUE=55, 
		MAYOR_IGUAL_QUE=56, MENOR_IGUAL_QUE=57, AND=58, OR=59, NOT=60, INT_LIT=61, 
		FLOAT_LIT=62, STRING_LIT=63, RUNE_LIT=64, IDENTIFIER=65, ESPACIO_BLANCO=66, 
		COMENTARIO_LINE=67, COMENTARIO_MULTILINEA=68;
	public const int
		RULE_program = 0, RULE_instruction = 1, RULE_conversionFunc = 2, RULE_funcDecl = 3, 
		RULE_paramsList = 4, RULE_param = 5, RULE_structDecl = 6, RULE_fieldDecl = 7, 
		RULE_structLiteral = 8, RULE_fieldValue = 9, RULE_bloque = 10, RULE_breakStmt = 11, 
		RULE_continueStmt = 12, RULE_returnStmt = 13, RULE_incDecStmt = 14, RULE_forStmt = 15, 
		RULE_forWhileStmt = 16, RULE_forThreePartStmt = 17, RULE_forInit = 18, 
		RULE_forPost = 19, RULE_switchStmt = 20, RULE_caseStmt = 21, RULE_defaultStmt = 22, 
		RULE_ifStmt = 23, RULE_elseIfStmt = 24, RULE_elseStmt = 25, RULE_declaracion = 26, 
		RULE_assignacion = 27, RULE_exprStmt = 28, RULE_printStmt = 29, RULE_argumentList = 30, 
		RULE_expresion = 31, RULE_logicalOrExpr = 32, RULE_logicalAndExpr = 33, 
		RULE_equalityExpr = 34, RULE_relationalExpr = 35, RULE_addExpr = 36, RULE_mulExpr = 37, 
		RULE_unaryExpr = 38, RULE_sliceFunc = 39, RULE_sliceType = 40, RULE_typeSpec = 41, 
		RULE_sliceLiteral = 42, RULE_primary = 43, RULE_functCall = 44;
	public static readonly string[] ruleNames = {
		"program", "instruction", "conversionFunc", "funcDecl", "paramsList", 
		"param", "structDecl", "fieldDecl", "structLiteral", "fieldValue", "bloque", 
		"breakStmt", "continueStmt", "returnStmt", "incDecStmt", "forStmt", "forWhileStmt", 
		"forThreePartStmt", "forInit", "forPost", "switchStmt", "caseStmt", "defaultStmt", 
		"ifStmt", "elseIfStmt", "elseStmt", "declaracion", "assignacion", "exprStmt", 
		"printStmt", "argumentList", "expresion", "logicalOrExpr", "logicalAndExpr", 
		"equalityExpr", "relationalExpr", "addExpr", "mulExpr", "unaryExpr", "sliceFunc", 
		"sliceType", "typeSpec", "sliceLiteral", "primary", "functCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'fmt'", "'Println'", "'if'", "'else'", "'for'", "'switch'", 
		"'case'", "'default'", "'break'", "'continue'", "'return'", "'len'", "'append'", 
		"'slices'", "'strings'", "'join'", "'Index'", "'struct'", "'func'", "'strconv'", 
		"'Atoi'", "'ParseFloat'", "'reflect'", "'TypeOf'", "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'", "'.'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "','", "':'", "'='", "':='", "'+='", "'-='", "'++'", "'--'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='", "'&&'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "FMT", "PRINTLN", "IF", "ELSE", "FOR", "SWITCH", "CASE", 
		"DEFAULT", "BREAK", "CONTINUE", "RETURN", "LEN", "APPEND", "SLICES", "STRINGS", 
		"JOIN", "INDEX", "STRUCT", "FUNC", "STRCONV", "ATOI", "PARSERFLOAT", "REFLECT", 
		"TYPEOF", "INT_TYPE", "FLOAT64_TYPE", "STRING_TYPE", "BOOL_TYPE", "RUNE_TYPE", 
		"PUNTO", "PARENTESIS_IZQ", "PARENTESIS_DER", "LLAVE_IZQ", "LLAVE_DER", 
		"CORCHETE_IZQ", "CORCHETE_DER", "PUNTO_Y_COMA", "COMA", "DOS_PUNTOS", 
		"ASIGNACION", "ASIGNACION_DECLARACION", "ASIGNACIO_INCREMENTO", "ASIGNACIO_DECREMENTO", 
		"INCREMENTO", "DECREMENTO", "PLUS", "MINUS", "STAR", "DIV", "MOD", "IGUAL", 
		"DIFERENTE", "MAYOR_QUE", "MENOR_QUE", "MAYOR_IGUAL_QUE", "MENOR_IGUAL_QUE", 
		"AND", "OR", "NOT", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "RUNE_LIT", 
		"IDENTIFIER", "ESPACIO_BLANCO", "COMENTARIO_LINE", "COMENTARIO_MULTILINEA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static gramaticaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public gramaticaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public gramaticaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(gramaticaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext[] structDecl() {
			return GetRuleContexts<StructDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl(int i) {
			return GetRuleContext<StructDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152639939415245610L) != 0) || _la==RUNE_LIT || _la==IDENTIFIER) {
				{
				State = 93;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRUCT:
					{
					State = 90;
					structDecl();
					}
					break;
				case FUNC:
					{
					State = 91;
					funcDecl();
					}
					break;
				case VAR:
				case FMT:
				case IF:
				case FOR:
				case SWITCH:
				case BREAK:
				case CONTINUE:
				case RETURN:
				case LEN:
				case APPEND:
				case SLICES:
				case STRINGS:
				case STRCONV:
				case REFLECT:
				case PARENTESIS_IZQ:
				case LLAVE_IZQ:
				case CORCHETE_IZQ:
				case MINUS:
				case NOT:
				case INT_LIT:
				case FLOAT_LIT:
				case STRING_LIT:
				case RUNE_LIT:
				case IDENTIFIER:
					{
					State = 92;
					instruction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion() {
			return GetRuleContext<DeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignacionContext assignacion() {
			return GetRuleContext<AssignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruction);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				declaracion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				assignacion();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				exprStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				printStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				ifStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				switchStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				forStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 107;
				incDecStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108;
				returnStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 109;
				continueStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 110;
				breakStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCONV() { return GetToken(gramaticaParser.STRCONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(gramaticaParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOI() { return GetToken(gramaticaParser.ATOI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSERFLOAT() { return GetToken(gramaticaParser.PARSERFLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFLECT() { return GetToken(gramaticaParser.REFLECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(gramaticaParser.TYPEOF, 0); }
		public ConversionFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterConversionFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitConversionFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionFuncContext conversionFunc() {
		ConversionFuncContext _localctx = new ConversionFuncContext(Context, State);
		EnterRule(_localctx, 4, RULE_conversionFunc);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				Match(STRCONV);
				State = 114;
				Match(PUNTO);
				State = 115;
				Match(ATOI);
				State = 116;
				Match(PARENTESIS_IZQ);
				State = 117;
				expresion();
				State = 118;
				Match(PARENTESIS_DER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(STRCONV);
				State = 121;
				Match(PUNTO);
				State = 122;
				Match(PARSERFLOAT);
				State = 123;
				Match(PARENTESIS_IZQ);
				State = 124;
				expresion();
				State = 125;
				Match(PARENTESIS_DER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				Match(REFLECT);
				State = 128;
				Match(PUNTO);
				State = 129;
				Match(TYPEOF);
				State = 130;
				Match(PARENTESIS_IZQ);
				State = 131;
				expresion();
				State = 132;
				Match(PARENTESIS_DER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(gramaticaParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARENTESIS_IZQ() { return GetTokens(gramaticaParser.PARENTESIS_IZQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ(int i) {
			return GetToken(gramaticaParser.PARENTESIS_IZQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARENTESIS_DER() { return GetTokens(gramaticaParser.PARENTESIS_DER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER(int i) {
			return GetToken(gramaticaParser.PARENTESIS_DER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsListContext paramsList() {
			return GetRuleContext<ParamsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcDecl);
		int _la;
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(FUNC);
				State = 137;
				Match(IDENTIFIER);
				State = 138;
				Match(PARENTESIS_IZQ);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 139;
					paramsList();
					}
				}

				State = 142;
				Match(PARENTESIS_DER);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 549755814943L) != 0)) {
					{
					State = 143;
					typeSpec();
					}
				}

				State = 146;
				bloque();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				Match(FUNC);
				State = 148;
				Match(PARENTESIS_IZQ);
				State = 149;
				Match(IDENTIFIER);
				State = 150;
				Match(IDENTIFIER);
				State = 151;
				Match(PARENTESIS_DER);
				State = 152;
				Match(IDENTIFIER);
				State = 153;
				Match(PARENTESIS_IZQ);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 154;
					paramsList();
					}
				}

				State = 157;
				Match(PARENTESIS_DER);
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 549755814943L) != 0)) {
					{
					State = 158;
					typeSpec();
					}
				}

				State = 161;
				bloque();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public ParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterParamsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitParamsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsListContext paramsList() {
		ParamsListContext _localctx = new ParamsListContext(Context, State);
		EnterRule(_localctx, 8, RULE_paramsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			param();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 165;
				Match(COMA);
				State = 166;
				param();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 10, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(IDENTIFIER);
			State = 173;
			typeSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(gramaticaParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext[] fieldDecl() {
			return GetRuleContexts<FieldDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext fieldDecl(int i) {
			return GetRuleContext<FieldDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(STRUCT);
			State = 176;
			Match(IDENTIFIER);
			State = 177;
			Match(LLAVE_IZQ);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 178;
				fieldDecl();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 549755814943L) != 0) );
			State = 183;
			Match(LLAVE_DER);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 184;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			typeSpec();
			State = 188;
			Match(IDENTIFIER);
			State = 189;
			Match(PUNTO_Y_COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext[] fieldValue() {
			return GetRuleContexts<FieldValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldValueContext fieldValue(int i) {
			return GetRuleContext<FieldValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public StructLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructLiteralContext structLiteral() {
		StructLiteralContext _localctx = new StructLiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_structLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(LLAVE_IZQ);
			State = 192;
			fieldValue();
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 193;
					Match(COMA);
					State = 194;
					fieldValue();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMA) {
				{
				State = 200;
				Match(COMA);
				}
			}

			State = 203;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOS_PUNTOS() { return GetToken(gramaticaParser.DOS_PUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFieldValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFieldValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldValueContext fieldValue() {
		FieldValueContext _localctx = new FieldValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(IDENTIFIER);
			State = 206;
			Match(DOS_PUNTOS);
			State = 207;
			expresion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public BloqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloque; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloqueContext bloque() {
		BloqueContext _localctx = new BloqueContext(Context, State);
		EnterRule(_localctx, 20, RULE_bloque);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(LLAVE_IZQ);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152639939416818474L) != 0) || _la==RUNE_LIT || _la==IDENTIFIER) {
				{
				{
				State = 210;
				instruction();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(gramaticaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_breakStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(BREAK);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 219;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(gramaticaParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_continueStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(CONTINUE);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 223;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(gramaticaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(RETURN);
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 227;
				expresion();
				}
				break;
			}
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 230;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTO() { return GetToken(gramaticaParser.INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTO() { return GetToken(gramaticaParser.DECREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public IncDecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStmtContext incDecStmt() {
		IncDecStmtContext _localctx = new IncDecStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_incDecStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(IDENTIFIER);
			State = 234;
			_la = TokenStream.LA(1);
			if ( !(_la==INCREMENTO || _la==DECREMENTO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 235;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForWhileStmtContext forWhileStmt() {
			return GetRuleContext<ForWhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForThreePartStmtContext forThreePartStmt() {
			return GetRuleContext<ForThreePartStmtContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_forStmt);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				forWhileStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				forThreePartStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForWhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(gramaticaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public ForWhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forWhileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForWhileStmtContext forWhileStmt() {
		ForWhileStmtContext _localctx = new ForWhileStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_forWhileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(FOR);
			State = 243;
			expresion();
			State = 244;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForThreePartStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(gramaticaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO_Y_COMA() { return GetTokens(gramaticaParser.PUNTO_Y_COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA(int i) {
			return GetToken(gramaticaParser.PUNTO_Y_COMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForPostContext forPost() {
			return GetRuleContext<ForPostContext>(0);
		}
		public ForThreePartStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forThreePartStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForThreePartStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForThreePartStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForThreePartStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForThreePartStmtContext forThreePartStmt() {
		ForThreePartStmtContext _localctx = new ForThreePartStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_forThreePartStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(FOR);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR || _la==IDENTIFIER) {
				{
				State = 247;
				forInit();
				}
			}

			State = 250;
			Match(PUNTO_Y_COMA);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 8866496137136399L) != 0)) {
				{
				State = 251;
				expresion();
				}
			}

			State = 254;
			Match(PUNTO_Y_COMA);
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 255;
				forPost();
				}
				break;
			}
			State = 258;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignacionContext assignacion() {
			return GetRuleContext<AssignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion() {
			return GetRuleContext<DeclaracionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 36, RULE_forInit);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				assignacion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				declaracion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForPostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignacionContext assignacion() {
			return GetRuleContext<AssignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		public ForPostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forPost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterForPost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitForPost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForPost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForPostContext forPost() {
		ForPostContext _localctx = new ForPostContext(Context, State);
		EnterRule(_localctx, 38, RULE_forPost);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				assignacion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				exprStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266;
				incDecStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(gramaticaParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext[] caseStmt() {
			return GetRuleContexts<CaseStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt(int i) {
			return GetRuleContext<CaseStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStmtContext defaultStmt() {
			return GetRuleContext<DefaultStmtContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_switchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(SWITCH);
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 270;
				Match(PARENTESIS_IZQ);
				State = 271;
				expresion();
				State = 272;
				Match(PARENTESIS_DER);
				}
				break;
			case 2:
				{
				State = 274;
				expresion();
				}
				break;
			}
			State = 277;
			Match(LLAVE_IZQ);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 278;
				caseStmt();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 284;
				defaultStmt();
				}
			}

			State = 287;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(gramaticaParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOS_PUNTOS() { return GetToken(gramaticaParser.DOS_PUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_caseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(CASE);
			State = 290;
			expresion();
			State = 291;
			Match(DOS_PUNTOS);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152639939416818474L) != 0) || _la==RUNE_LIT || _la==IDENTIFIER) {
				{
				{
				State = 292;
				instruction();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(gramaticaParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOS_PUNTOS() { return GetToken(gramaticaParser.DOS_PUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public DefaultStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterDefaultStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitDefaultStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStmtContext defaultStmt() {
		DefaultStmtContext _localctx = new DefaultStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_defaultStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(DEFAULT);
			State = 299;
			Match(DOS_PUNTOS);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152639939416818474L) != 0) || _la==RUNE_LIT || _la==IDENTIFIER) {
				{
				{
				State = 300;
				instruction();
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(gramaticaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStmtContext[] elseIfStmt() {
			return GetRuleContexts<ElseIfStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStmtContext elseIfStmt(int i) {
			return GetRuleContext<ElseIfStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_ifStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(IF);
			{
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 307;
				Match(PARENTESIS_IZQ);
				}
				break;
			}
			State = 310;
			expresion();
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTESIS_DER) {
				{
				State = 311;
				Match(PARENTESIS_DER);
				}
			}

			}
			State = 314;
			bloque();
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 315;
					elseIfStmt();
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 321;
				elseStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(gramaticaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(gramaticaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		public ElseIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterElseIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitElseIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStmtContext elseIfStmt() {
		ElseIfStmtContext _localctx = new ElseIfStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_elseIfStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(ELSE);
			State = 325;
			Match(IF);
			{
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 326;
				Match(PARENTESIS_IZQ);
				}
				break;
			}
			State = 329;
			expresion();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTESIS_DER) {
				{
				State = 330;
				Match(PARENTESIS_DER);
				}
			}

			}
			State = 333;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(gramaticaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(ELSE);
			State = 336;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(gramaticaParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION() { return GetToken(gramaticaParser.ASIGNACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(gramaticaParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsListContext paramsList() {
			return GetRuleContext<ParamsListContext>(0);
		}
		public DeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionContext declaracion() {
		DeclaracionContext _localctx = new DeclaracionContext(Context, State);
		EnterRule(_localctx, 52, RULE_declaracion);
		int _la;
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				Match(VAR);
				State = 339;
				Match(IDENTIFIER);
				State = 341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 340;
					typeSpec();
					}
					break;
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASIGNACION) {
					{
					State = 343;
					Match(ASIGNACION);
					State = 344;
					expresion();
					}
				}

				State = 348;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 347;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				Match(IDENTIFIER);
				State = 351;
				Match(IDENTIFIER);
				State = 352;
				Match(ASIGNACION);
				State = 353;
				structLiteral();
				State = 355;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 354;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				Match(VAR);
				State = 358;
				Match(IDENTIFIER);
				State = 359;
				Match(ASIGNACION);
				State = 360;
				Match(FUNC);
				State = 361;
				Match(PARENTESIS_IZQ);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 362;
					paramsList();
					}
				}

				State = 365;
				Match(PARENTESIS_DER);
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 549755814943L) != 0)) {
					{
					State = 366;
					typeSpec();
					}
				}

				State = 369;
				bloque();
				State = 371;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 370;
					Match(PUNTO_Y_COMA);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION() { return GetToken(gramaticaParser.ASIGNACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACIO_INCREMENTO() { return GetToken(gramaticaParser.ASIGNACIO_INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION_DECLARACION() { return GetToken(gramaticaParser.ASIGNACION_DECLARACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACIO_DECREMENTO() { return GetToken(gramaticaParser.ASIGNACIO_DECREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(gramaticaParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(gramaticaParser.PUNTO, i);
		}
		public AssignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterAssignacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitAssignacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignacionContext assignacion() {
		AssignacionContext _localctx = new AssignacionContext(Context, State);
		EnterRule(_localctx, 54, RULE_assignacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 375;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 376;
				Match(IDENTIFIER);
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 377;
					Match(PUNTO);
					State = 378;
					Match(IDENTIFIER);
					}
					}
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PUNTO );
				}
				break;
			}
			State = 385;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833280L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 386;
			expresion();
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 387;
				Match(PUNTO_Y_COMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_exprStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			expresion();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 391;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(gramaticaParser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(gramaticaParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTLN() { return GetToken(gramaticaParser.PRINTLN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO_Y_COMA() { return GetToken(gramaticaParser.PUNTO_Y_COMA, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(FMT);
			State = 395;
			Match(PUNTO);
			State = 396;
			Match(PRINTLN);
			State = 397;
			Match(PARENTESIS_IZQ);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 8866496137136399L) != 0)) {
				{
				State = 398;
				argumentList();
				}
			}

			State = 401;
			Match(PARENTESIS_DER);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTO_Y_COMA) {
				{
				State = 402;
				Match(PUNTO_Y_COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 60, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			expresion();
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 406;
				Match(COMA);
				State = 407;
				expresion();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExprContext logicalOrExpr() {
			return GetRuleContext<LogicalOrExprContext>(0);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(Context, State);
		EnterRule(_localctx, 62, RULE_expresion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			logicalOrExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExprContext[] logicalAndExpr() {
			return GetRuleContexts<LogicalAndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExprContext logicalAndExpr(int i) {
			return GetRuleContext<LogicalAndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(gramaticaParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(gramaticaParser.OR, i);
		}
		public LogicalOrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExprContext logicalOrExpr() {
		LogicalOrExprContext _localctx = new LogicalOrExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_logicalOrExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			logicalAndExpr();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 416;
				Match(OR);
				State = 417;
				logicalAndExpr();
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(gramaticaParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(gramaticaParser.AND, i);
		}
		public LogicalAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExprContext logicalAndExpr() {
		LogicalAndExprContext _localctx = new LogicalAndExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_logicalAndExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			equalityExpr();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 424;
				Match(AND);
				State = 425;
				equalityExpr();
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGUAL() { return GetTokens(gramaticaParser.IGUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL(int i) {
			return GetToken(gramaticaParser.IGUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIFERENTE() { return GetTokens(gramaticaParser.DIFERENTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFERENTE(int i) {
			return GetToken(gramaticaParser.DIFERENTE, i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_equalityExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			relationalExpr();
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGUAL || _la==DIFERENTE) {
				{
				{
				State = 432;
				_la = TokenStream.LA(1);
				if ( !(_la==IGUAL || _la==DIFERENTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 433;
				relationalExpr();
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAYOR_QUE() { return GetTokens(gramaticaParser.MAYOR_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR_QUE(int i) {
			return GetToken(gramaticaParser.MAYOR_QUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MENOR_QUE() { return GetTokens(gramaticaParser.MENOR_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR_QUE(int i) {
			return GetToken(gramaticaParser.MENOR_QUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAYOR_IGUAL_QUE() { return GetTokens(gramaticaParser.MAYOR_IGUAL_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR_IGUAL_QUE(int i) {
			return GetToken(gramaticaParser.MAYOR_IGUAL_QUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MENOR_IGUAL_QUE() { return GetTokens(gramaticaParser.MENOR_IGUAL_QUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR_IGUAL_QUE(int i) {
			return GetToken(gramaticaParser.MENOR_IGUAL_QUE, i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_relationalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			addExpr();
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0)) {
				{
				{
				State = 440;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 441;
				addExpr();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(gramaticaParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(gramaticaParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(gramaticaParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(gramaticaParser.MINUS, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			mulExpr();
			State = 452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 448;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 449;
					mulExpr();
					}
					} 
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(gramaticaParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(gramaticaParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(gramaticaParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(gramaticaParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(gramaticaParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(gramaticaParser.MOD, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			unaryExpr();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649673949184L) != 0)) {
				{
				{
				State = 456;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649673949184L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 457;
				unaryExpr();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(gramaticaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(gramaticaParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceFuncContext sliceFunc() {
			return GetRuleContext<SliceFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionFuncContext conversionFunc() {
			return GetRuleContext<ConversionFuncContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 76, RULE_unaryExpr);
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463;
				Match(MINUS);
				State = 464;
				unaryExpr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465;
				Match(NOT);
				State = 466;
				unaryExpr();
				}
				break;
			case PARENTESIS_IZQ:
			case LLAVE_IZQ:
			case CORCHETE_IZQ:
			case INT_LIT:
			case FLOAT_LIT:
			case STRING_LIT:
			case RUNE_LIT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 467;
				primary();
				}
				break;
			case LEN:
			case APPEND:
			case SLICES:
			case STRINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 468;
				sliceFunc();
				}
				break;
			case STRCONV:
			case REFLECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 469;
				conversionFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(gramaticaParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPEND() { return GetToken(gramaticaParser.APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICES() { return GetToken(gramaticaParser.SLICES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO() { return GetToken(gramaticaParser.PUNTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(gramaticaParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGS() { return GetToken(gramaticaParser.STRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(gramaticaParser.JOIN, 0); }
		public SliceFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSliceFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSliceFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceFuncContext sliceFunc() {
		SliceFuncContext _localctx = new SliceFuncContext(Context, State);
		EnterRule(_localctx, 78, RULE_sliceFunc);
		int _la;
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				Match(LEN);
				State = 473;
				Match(PARENTESIS_IZQ);
				State = 474;
				expresion();
				State = 475;
				Match(PARENTESIS_DER);
				}
				break;
			case APPEND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				Match(APPEND);
				State = 478;
				Match(PARENTESIS_IZQ);
				State = 479;
				expresion();
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 480;
					Match(COMA);
					State = 481;
					expresion();
					}
					}
					State = 486;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 487;
				Match(PARENTESIS_DER);
				}
				break;
			case SLICES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489;
				Match(SLICES);
				State = 490;
				Match(PUNTO);
				State = 491;
				Match(INDEX);
				State = 492;
				Match(PARENTESIS_IZQ);
				State = 493;
				expresion();
				State = 494;
				Match(COMA);
				State = 495;
				expresion();
				State = 496;
				Match(PARENTESIS_DER);
				}
				break;
			case STRINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 498;
				Match(STRINGS);
				State = 499;
				Match(PUNTO);
				State = 500;
				Match(JOIN);
				State = 501;
				Match(PARENTESIS_IZQ);
				State = 502;
				expresion();
				State = 503;
				Match(COMA);
				State = 504;
				expresion();
				State = 505;
				Match(PARENTESIS_DER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_IZQ() { return GetToken(gramaticaParser.CORCHETE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_DER() { return GetToken(gramaticaParser.CORCHETE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(CORCHETE_IZQ);
			State = 510;
			Match(CORCHETE_DER);
			State = 511;
			typeSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(gramaticaParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT64_TYPE() { return GetToken(gramaticaParser.FLOAT64_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(gramaticaParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(gramaticaParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_TYPE() { return GetToken(gramaticaParser.RUNE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(gramaticaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeSpec);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				Match(INT_TYPE);
				}
				break;
			case FLOAT64_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514;
				Match(FLOAT64_TYPE);
				}
				break;
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 515;
				Match(STRING_TYPE);
				}
				break;
			case BOOL_TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 516;
				Match(BOOL_TYPE);
				}
				break;
			case RUNE_TYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 517;
				Match(RUNE_TYPE);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 518;
				Match(IDENTIFIER);
				}
				break;
			case CORCHETE_IZQ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 519;
				sliceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZQ() { return GetToken(gramaticaParser.LLAVE_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DER() { return GetToken(gramaticaParser.LLAVE_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(gramaticaParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(gramaticaParser.COMA, i);
		}
		public SliceLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceLiteralContext sliceLiteral() {
		SliceLiteralContext _localctx = new SliceLiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_sliceLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			sliceType();
			State = 523;
			Match(LLAVE_IZQ);
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 8866496137136399L) != 0)) {
				{
				State = 524;
				expresion();
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 525;
					Match(COMA);
					State = 526;
					expresion();
					}
					}
					State = 531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 534;
			Match(LLAVE_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctCallContext functCall() {
			return GetRuleContext<FunctCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CORCHETE_IZQ() { return GetTokens(gramaticaParser.CORCHETE_IZQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_IZQ(int i) {
			return GetToken(gramaticaParser.CORCHETE_IZQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CORCHETE_DER() { return GetTokens(gramaticaParser.CORCHETE_DER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_DER(int i) {
			return GetToken(gramaticaParser.CORCHETE_DER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(gramaticaParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(gramaticaParser.PUNTO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LIT() { return GetToken(gramaticaParser.INT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(gramaticaParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LIT() { return GetToken(gramaticaParser.STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(gramaticaParser.RUNE_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SliceLiteralContext sliceLiteral() {
			return GetRuleContext<SliceLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 86, RULE_primary);
		int _la;
		try {
			int _alt;
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536;
				functCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537;
				Match(IDENTIFIER);
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 538;
						Match(CORCHETE_IZQ);
						State = 539;
						expresion();
						State = 540;
						Match(CORCHETE_DER);
						}
						} 
					}
					State = 546;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PUNTO) {
					{
					{
					State = 547;
					Match(PUNTO);
					State = 548;
					Match(IDENTIFIER);
					}
					}
					State = 553;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 554;
				Match(INT_LIT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 555;
				Match(FLOAT_LIT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 556;
				Match(STRING_LIT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 557;
				Match(RUNE_LIT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 558;
				Match(PARENTESIS_IZQ);
				State = 559;
				expresion();
				State = 560;
				Match(PARENTESIS_DER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 562;
				sliceLiteral();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 563;
				structLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(gramaticaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(gramaticaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(gramaticaParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(gramaticaParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTO() { return GetTokens(gramaticaParser.PUNTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTO(int i) {
			return GetToken(gramaticaParser.PUNTO, i);
		}
		public FunctCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.EnterFunctCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IgramaticaListener typedListener = listener as IgramaticaListener;
			if (typedListener != null) typedListener.ExitFunctCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IgramaticaVisitor<TResult> typedVisitor = visitor as IgramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctCallContext functCall() {
		FunctCallContext _localctx = new FunctCallContext(Context, State);
		EnterRule(_localctx, 88, RULE_functCall);
		int _la;
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				Match(IDENTIFIER);
				State = 567;
				Match(PARENTESIS_IZQ);
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 8866496137136399L) != 0)) {
					{
					State = 568;
					argumentList();
					}
				}

				State = 571;
				Match(PARENTESIS_DER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				Match(IDENTIFIER);
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 573;
					Match(PUNTO);
					State = 574;
					Match(IDENTIFIER);
					}
					}
					State = 577;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PUNTO );
				State = 579;
				Match(PARENTESIS_IZQ);
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 8866496137136399L) != 0)) {
					{
					State = 580;
					argumentList();
					}
				}

				State = 583;
				Match(PARENTESIS_DER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,68,587,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,1,0,1,0,5,0,94,8,0,10,0,12,0,97,9,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,112,8,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
		2,135,8,2,1,3,1,3,1,3,1,3,3,3,141,8,3,1,3,1,3,3,3,145,8,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,3,3,156,8,3,1,3,1,3,3,3,160,8,3,1,3,3,3,163,8,
		3,1,4,1,4,1,4,5,4,168,8,4,10,4,12,4,171,9,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,4,6,180,8,6,11,6,12,6,181,1,6,1,6,3,6,186,8,6,1,7,1,7,1,7,1,7,1,8,1,
		8,1,8,1,8,5,8,196,8,8,10,8,12,8,199,9,8,1,8,3,8,202,8,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,10,1,10,5,10,212,8,10,10,10,12,10,215,9,10,1,10,1,10,1,11,
		1,11,3,11,221,8,11,1,12,1,12,3,12,225,8,12,1,13,1,13,3,13,229,8,13,1,13,
		3,13,232,8,13,1,14,1,14,1,14,3,14,237,8,14,1,15,1,15,3,15,241,8,15,1,16,
		1,16,1,16,1,16,1,17,1,17,3,17,249,8,17,1,17,1,17,3,17,253,8,17,1,17,1,
		17,3,17,257,8,17,1,17,1,17,1,18,1,18,3,18,263,8,18,1,19,1,19,1,19,3,19,
		268,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,276,8,20,1,20,1,20,5,20,280,
		8,20,10,20,12,20,283,9,20,1,20,3,20,286,8,20,1,20,1,20,1,21,1,21,1,21,
		1,21,5,21,294,8,21,10,21,12,21,297,9,21,1,22,1,22,1,22,5,22,302,8,22,10,
		22,12,22,305,9,22,1,23,1,23,3,23,309,8,23,1,23,1,23,3,23,313,8,23,1,23,
		1,23,5,23,317,8,23,10,23,12,23,320,9,23,1,23,3,23,323,8,23,1,24,1,24,1,
		24,3,24,328,8,24,1,24,1,24,3,24,332,8,24,1,24,1,24,1,25,1,25,1,25,1,26,
		1,26,1,26,3,26,342,8,26,1,26,1,26,3,26,346,8,26,1,26,3,26,349,8,26,1,26,
		1,26,1,26,1,26,1,26,3,26,356,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,364,
		8,26,1,26,1,26,3,26,368,8,26,1,26,1,26,3,26,372,8,26,3,26,374,8,26,1,27,
		1,27,1,27,1,27,4,27,380,8,27,11,27,12,27,381,3,27,384,8,27,1,27,1,27,1,
		27,3,27,389,8,27,1,28,1,28,3,28,393,8,28,1,29,1,29,1,29,1,29,1,29,3,29,
		400,8,29,1,29,1,29,3,29,404,8,29,1,30,1,30,1,30,5,30,409,8,30,10,30,12,
		30,412,9,30,1,31,1,31,1,32,1,32,1,32,5,32,419,8,32,10,32,12,32,422,9,32,
		1,33,1,33,1,33,5,33,427,8,33,10,33,12,33,430,9,33,1,34,1,34,1,34,5,34,
		435,8,34,10,34,12,34,438,9,34,1,35,1,35,1,35,5,35,443,8,35,10,35,12,35,
		446,9,35,1,36,1,36,1,36,5,36,451,8,36,10,36,12,36,454,9,36,1,37,1,37,1,
		37,5,37,459,8,37,10,37,12,37,462,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,3,38,471,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,
		483,8,39,10,39,12,39,486,9,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,508,8,
		39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,521,8,41,
		1,42,1,42,1,42,1,42,1,42,5,42,528,8,42,10,42,12,42,531,9,42,3,42,533,8,
		42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,543,8,43,10,43,12,43,546,
		9,43,1,43,1,43,5,43,550,8,43,10,43,12,43,553,9,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,565,8,43,1,44,1,44,1,44,3,44,570,8,
		44,1,44,1,44,1,44,1,44,4,44,576,8,44,11,44,12,44,577,1,44,1,44,3,44,582,
		8,44,1,44,3,44,585,8,44,1,44,0,0,45,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,0,6,1,0,45,46,1,0,41,44,1,0,52,53,1,0,54,57,1,
		0,47,48,1,0,49,51,642,0,95,1,0,0,0,2,111,1,0,0,0,4,134,1,0,0,0,6,162,1,
		0,0,0,8,164,1,0,0,0,10,172,1,0,0,0,12,175,1,0,0,0,14,187,1,0,0,0,16,191,
		1,0,0,0,18,205,1,0,0,0,20,209,1,0,0,0,22,218,1,0,0,0,24,222,1,0,0,0,26,
		226,1,0,0,0,28,233,1,0,0,0,30,240,1,0,0,0,32,242,1,0,0,0,34,246,1,0,0,
		0,36,262,1,0,0,0,38,267,1,0,0,0,40,269,1,0,0,0,42,289,1,0,0,0,44,298,1,
		0,0,0,46,306,1,0,0,0,48,324,1,0,0,0,50,335,1,0,0,0,52,373,1,0,0,0,54,383,
		1,0,0,0,56,390,1,0,0,0,58,394,1,0,0,0,60,405,1,0,0,0,62,413,1,0,0,0,64,
		415,1,0,0,0,66,423,1,0,0,0,68,431,1,0,0,0,70,439,1,0,0,0,72,447,1,0,0,
		0,74,455,1,0,0,0,76,470,1,0,0,0,78,507,1,0,0,0,80,509,1,0,0,0,82,520,1,
		0,0,0,84,522,1,0,0,0,86,564,1,0,0,0,88,584,1,0,0,0,90,94,3,12,6,0,91,94,
		3,6,3,0,92,94,3,2,1,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,94,97,
		1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,99,
		5,0,0,1,99,1,1,0,0,0,100,112,3,52,26,0,101,112,3,54,27,0,102,112,3,56,
		28,0,103,112,3,58,29,0,104,112,3,46,23,0,105,112,3,40,20,0,106,112,3,30,
		15,0,107,112,3,28,14,0,108,112,3,26,13,0,109,112,3,24,12,0,110,112,3,22,
		11,0,111,100,1,0,0,0,111,101,1,0,0,0,111,102,1,0,0,0,111,103,1,0,0,0,111,
		104,1,0,0,0,111,105,1,0,0,0,111,106,1,0,0,0,111,107,1,0,0,0,111,108,1,
		0,0,0,111,109,1,0,0,0,111,110,1,0,0,0,112,3,1,0,0,0,113,114,5,21,0,0,114,
		115,5,31,0,0,115,116,5,22,0,0,116,117,5,32,0,0,117,118,3,62,31,0,118,119,
		5,33,0,0,119,135,1,0,0,0,120,121,5,21,0,0,121,122,5,31,0,0,122,123,5,23,
		0,0,123,124,5,32,0,0,124,125,3,62,31,0,125,126,5,33,0,0,126,135,1,0,0,
		0,127,128,5,24,0,0,128,129,5,31,0,0,129,130,5,25,0,0,130,131,5,32,0,0,
		131,132,3,62,31,0,132,133,5,33,0,0,133,135,1,0,0,0,134,113,1,0,0,0,134,
		120,1,0,0,0,134,127,1,0,0,0,135,5,1,0,0,0,136,137,5,20,0,0,137,138,5,65,
		0,0,138,140,5,32,0,0,139,141,3,8,4,0,140,139,1,0,0,0,140,141,1,0,0,0,141,
		142,1,0,0,0,142,144,5,33,0,0,143,145,3,82,41,0,144,143,1,0,0,0,144,145,
		1,0,0,0,145,146,1,0,0,0,146,163,3,20,10,0,147,148,5,20,0,0,148,149,5,32,
		0,0,149,150,5,65,0,0,150,151,5,65,0,0,151,152,5,33,0,0,152,153,5,65,0,
		0,153,155,5,32,0,0,154,156,3,8,4,0,155,154,1,0,0,0,155,156,1,0,0,0,156,
		157,1,0,0,0,157,159,5,33,0,0,158,160,3,82,41,0,159,158,1,0,0,0,159,160,
		1,0,0,0,160,161,1,0,0,0,161,163,3,20,10,0,162,136,1,0,0,0,162,147,1,0,
		0,0,163,7,1,0,0,0,164,169,3,10,5,0,165,166,5,39,0,0,166,168,3,10,5,0,167,
		165,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,9,1,0,
		0,0,171,169,1,0,0,0,172,173,5,65,0,0,173,174,3,82,41,0,174,11,1,0,0,0,
		175,176,5,19,0,0,176,177,5,65,0,0,177,179,5,34,0,0,178,180,3,14,7,0,179,
		178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,
		0,0,0,183,185,5,35,0,0,184,186,5,38,0,0,185,184,1,0,0,0,185,186,1,0,0,
		0,186,13,1,0,0,0,187,188,3,82,41,0,188,189,5,65,0,0,189,190,5,38,0,0,190,
		15,1,0,0,0,191,192,5,34,0,0,192,197,3,18,9,0,193,194,5,39,0,0,194,196,
		3,18,9,0,195,193,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,
		0,198,201,1,0,0,0,199,197,1,0,0,0,200,202,5,39,0,0,201,200,1,0,0,0,201,
		202,1,0,0,0,202,203,1,0,0,0,203,204,5,35,0,0,204,17,1,0,0,0,205,206,5,
		65,0,0,206,207,5,40,0,0,207,208,3,62,31,0,208,19,1,0,0,0,209,213,5,34,
		0,0,210,212,3,2,1,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
		214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,35,0,0,217,21,1,
		0,0,0,218,220,5,10,0,0,219,221,5,38,0,0,220,219,1,0,0,0,220,221,1,0,0,
		0,221,23,1,0,0,0,222,224,5,11,0,0,223,225,5,38,0,0,224,223,1,0,0,0,224,
		225,1,0,0,0,225,25,1,0,0,0,226,228,5,12,0,0,227,229,3,62,31,0,228,227,
		1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,230,232,5,38,0,0,231,230,1,0,0,
		0,231,232,1,0,0,0,232,27,1,0,0,0,233,234,5,65,0,0,234,236,7,0,0,0,235,
		237,5,38,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,29,1,0,0,0,238,241,3,
		32,16,0,239,241,3,34,17,0,240,238,1,0,0,0,240,239,1,0,0,0,241,31,1,0,0,
		0,242,243,5,6,0,0,243,244,3,62,31,0,244,245,3,20,10,0,245,33,1,0,0,0,246,
		248,5,6,0,0,247,249,3,36,18,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,
		1,0,0,0,250,252,5,38,0,0,251,253,3,62,31,0,252,251,1,0,0,0,252,253,1,0,
		0,0,253,254,1,0,0,0,254,256,5,38,0,0,255,257,3,38,19,0,256,255,1,0,0,0,
		256,257,1,0,0,0,257,258,1,0,0,0,258,259,3,20,10,0,259,35,1,0,0,0,260,263,
		3,54,27,0,261,263,3,52,26,0,262,260,1,0,0,0,262,261,1,0,0,0,263,37,1,0,
		0,0,264,268,3,54,27,0,265,268,3,56,28,0,266,268,3,28,14,0,267,264,1,0,
		0,0,267,265,1,0,0,0,267,266,1,0,0,0,268,39,1,0,0,0,269,275,5,7,0,0,270,
		271,5,32,0,0,271,272,3,62,31,0,272,273,5,33,0,0,273,276,1,0,0,0,274,276,
		3,62,31,0,275,270,1,0,0,0,275,274,1,0,0,0,276,277,1,0,0,0,277,281,5,34,
		0,0,278,280,3,42,21,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,
		281,282,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,284,286,3,44,22,0,285,
		284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,5,35,0,0,288,41,1,
		0,0,0,289,290,5,8,0,0,290,291,3,62,31,0,291,295,5,40,0,0,292,294,3,2,1,
		0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,
		43,1,0,0,0,297,295,1,0,0,0,298,299,5,9,0,0,299,303,5,40,0,0,300,302,3,
		2,1,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,
		304,45,1,0,0,0,305,303,1,0,0,0,306,308,5,4,0,0,307,309,5,32,0,0,308,307,
		1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,312,3,62,31,0,311,313,5,33,
		0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,318,3,20,10,0,
		315,317,3,48,24,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,
		319,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,321,323,3,50,25,0,322,321,
		1,0,0,0,322,323,1,0,0,0,323,47,1,0,0,0,324,325,5,5,0,0,325,327,5,4,0,0,
		326,328,5,32,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,
		3,62,31,0,330,332,5,33,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,
		0,0,333,334,3,20,10,0,334,49,1,0,0,0,335,336,5,5,0,0,336,337,3,20,10,0,
		337,51,1,0,0,0,338,339,5,1,0,0,339,341,5,65,0,0,340,342,3,82,41,0,341,
		340,1,0,0,0,341,342,1,0,0,0,342,345,1,0,0,0,343,344,5,41,0,0,344,346,3,
		62,31,0,345,343,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,349,5,38,0,
		0,348,347,1,0,0,0,348,349,1,0,0,0,349,374,1,0,0,0,350,351,5,65,0,0,351,
		352,5,65,0,0,352,353,5,41,0,0,353,355,3,16,8,0,354,356,5,38,0,0,355,354,
		1,0,0,0,355,356,1,0,0,0,356,374,1,0,0,0,357,358,5,1,0,0,358,359,5,65,0,
		0,359,360,5,41,0,0,360,361,5,20,0,0,361,363,5,32,0,0,362,364,3,8,4,0,363,
		362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,367,5,33,0,0,366,368,3,
		82,41,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,371,3,20,10,
		0,370,372,5,38,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,
		338,1,0,0,0,373,350,1,0,0,0,373,357,1,0,0,0,374,53,1,0,0,0,375,384,5,65,
		0,0,376,379,5,65,0,0,377,378,5,31,0,0,378,380,5,65,0,0,379,377,1,0,0,0,
		380,381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,375,
		1,0,0,0,383,376,1,0,0,0,384,385,1,0,0,0,385,386,7,1,0,0,386,388,3,62,31,
		0,387,389,5,38,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,55,1,0,0,0,390,
		392,3,62,31,0,391,393,5,38,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,57,
		1,0,0,0,394,395,5,2,0,0,395,396,5,31,0,0,396,397,5,3,0,0,397,399,5,32,
		0,0,398,400,3,60,30,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,
		401,403,5,33,0,0,402,404,5,38,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,
		59,1,0,0,0,405,410,3,62,31,0,406,407,5,39,0,0,407,409,3,62,31,0,408,406,
		1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,61,1,0,0,0,
		412,410,1,0,0,0,413,414,3,64,32,0,414,63,1,0,0,0,415,420,3,66,33,0,416,
		417,5,59,0,0,417,419,3,66,33,0,418,416,1,0,0,0,419,422,1,0,0,0,420,418,
		1,0,0,0,420,421,1,0,0,0,421,65,1,0,0,0,422,420,1,0,0,0,423,428,3,68,34,
		0,424,425,5,58,0,0,425,427,3,68,34,0,426,424,1,0,0,0,427,430,1,0,0,0,428,
		426,1,0,0,0,428,429,1,0,0,0,429,67,1,0,0,0,430,428,1,0,0,0,431,436,3,70,
		35,0,432,433,7,2,0,0,433,435,3,70,35,0,434,432,1,0,0,0,435,438,1,0,0,0,
		436,434,1,0,0,0,436,437,1,0,0,0,437,69,1,0,0,0,438,436,1,0,0,0,439,444,
		3,72,36,0,440,441,7,3,0,0,441,443,3,72,36,0,442,440,1,0,0,0,443,446,1,
		0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,71,1,0,0,0,446,444,1,0,0,0,447,
		452,3,74,37,0,448,449,7,4,0,0,449,451,3,74,37,0,450,448,1,0,0,0,451,454,
		1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,73,1,0,0,0,454,452,1,0,0,0,
		455,460,3,76,38,0,456,457,7,5,0,0,457,459,3,76,38,0,458,456,1,0,0,0,459,
		462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,75,1,0,0,0,462,460,1,0,
		0,0,463,464,5,48,0,0,464,471,3,76,38,0,465,466,5,60,0,0,466,471,3,76,38,
		0,467,471,3,86,43,0,468,471,3,78,39,0,469,471,3,4,2,0,470,463,1,0,0,0,
		470,465,1,0,0,0,470,467,1,0,0,0,470,468,1,0,0,0,470,469,1,0,0,0,471,77,
		1,0,0,0,472,473,5,13,0,0,473,474,5,32,0,0,474,475,3,62,31,0,475,476,5,
		33,0,0,476,508,1,0,0,0,477,478,5,14,0,0,478,479,5,32,0,0,479,484,3,62,
		31,0,480,481,5,39,0,0,481,483,3,62,31,0,482,480,1,0,0,0,483,486,1,0,0,
		0,484,482,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,486,484,1,0,0,0,487,
		488,5,33,0,0,488,508,1,0,0,0,489,490,5,15,0,0,490,491,5,31,0,0,491,492,
		5,18,0,0,492,493,5,32,0,0,493,494,3,62,31,0,494,495,5,39,0,0,495,496,3,
		62,31,0,496,497,5,33,0,0,497,508,1,0,0,0,498,499,5,16,0,0,499,500,5,31,
		0,0,500,501,5,17,0,0,501,502,5,32,0,0,502,503,3,62,31,0,503,504,5,39,0,
		0,504,505,3,62,31,0,505,506,5,33,0,0,506,508,1,0,0,0,507,472,1,0,0,0,507,
		477,1,0,0,0,507,489,1,0,0,0,507,498,1,0,0,0,508,79,1,0,0,0,509,510,5,36,
		0,0,510,511,5,37,0,0,511,512,3,82,41,0,512,81,1,0,0,0,513,521,5,26,0,0,
		514,521,5,27,0,0,515,521,5,28,0,0,516,521,5,29,0,0,517,521,5,30,0,0,518,
		521,5,65,0,0,519,521,3,80,40,0,520,513,1,0,0,0,520,514,1,0,0,0,520,515,
		1,0,0,0,520,516,1,0,0,0,520,517,1,0,0,0,520,518,1,0,0,0,520,519,1,0,0,
		0,521,83,1,0,0,0,522,523,3,80,40,0,523,532,5,34,0,0,524,529,3,62,31,0,
		525,526,5,39,0,0,526,528,3,62,31,0,527,525,1,0,0,0,528,531,1,0,0,0,529,
		527,1,0,0,0,529,530,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,532,524,1,
		0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,35,0,0,535,85,1,0,0,0,
		536,565,3,88,44,0,537,544,5,65,0,0,538,539,5,36,0,0,539,540,3,62,31,0,
		540,541,5,37,0,0,541,543,1,0,0,0,542,538,1,0,0,0,543,546,1,0,0,0,544,542,
		1,0,0,0,544,545,1,0,0,0,545,551,1,0,0,0,546,544,1,0,0,0,547,548,5,31,0,
		0,548,550,5,65,0,0,549,547,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,
		552,1,0,0,0,552,565,1,0,0,0,553,551,1,0,0,0,554,565,5,61,0,0,555,565,5,
		62,0,0,556,565,5,63,0,0,557,565,5,64,0,0,558,559,5,32,0,0,559,560,3,62,
		31,0,560,561,5,33,0,0,561,565,1,0,0,0,562,565,3,84,42,0,563,565,3,16,8,
		0,564,536,1,0,0,0,564,537,1,0,0,0,564,554,1,0,0,0,564,555,1,0,0,0,564,
		556,1,0,0,0,564,557,1,0,0,0,564,558,1,0,0,0,564,562,1,0,0,0,564,563,1,
		0,0,0,565,87,1,0,0,0,566,567,5,65,0,0,567,569,5,32,0,0,568,570,3,60,30,
		0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,585,5,33,0,0,572,
		575,5,65,0,0,573,574,5,31,0,0,574,576,5,65,0,0,575,573,1,0,0,0,576,577,
		1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,581,5,32,0,
		0,580,582,3,60,30,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,
		585,5,33,0,0,584,566,1,0,0,0,584,572,1,0,0,0,585,89,1,0,0,0,71,93,95,111,
		134,140,144,155,159,162,169,181,185,197,201,213,220,224,228,231,236,240,
		248,252,256,262,267,275,281,285,295,303,308,312,318,322,327,331,341,345,
		348,355,363,367,371,373,381,383,388,392,399,403,410,420,428,436,444,452,
		460,470,484,507,520,529,532,544,551,564,569,577,581,584
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
