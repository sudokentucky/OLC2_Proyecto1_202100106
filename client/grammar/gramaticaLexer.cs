//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gramatica.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class gramaticaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, IF=2, ELSE=3, FMT=4, PRINTLN=5, DOT=6, LPAREN=7, RPAREN=8, LBRACE=9, 
		RBRACE=10, SEMICOLON=11, COMMA=12, ASSIGN=13, PLUS=14, MINUS=15, STAR=16, 
		DIV=17, MOD=18, EQUAL=19, NOT_EQUAL=20, GREATER=21, LESS=22, GREATER_EQ=23, 
		LESS_EQ=24, AND_LOGIC=25, OR_LOGIC=26, NOT_LOGIC=27, INT_LIT=28, IDENTIFIER=29, 
		WS=30, LINE_COMMENT=31, BLOCK_COMMENT=32;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"VAR", "IF", "ELSE", "FMT", "PRINTLN", "DOT", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "SEMICOLON", "COMMA", "ASSIGN", "PLUS", "MINUS", "STAR", "DIV", 
		"MOD", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "GREATER_EQ", "LESS_EQ", 
		"AND_LOGIC", "OR_LOGIC", "NOT_LOGIC", "INT_LIT", "IDENTIFIER", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT"
	};


	public gramaticaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public gramaticaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'if'", "'else'", "'fmt'", "'Println'", "'.'", "'('", "')'", 
		"'{'", "'}'", "';'", "','", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "IF", "ELSE", "FMT", "PRINTLN", "DOT", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "SEMICOLON", "COMMA", "ASSIGN", "PLUS", "MINUS", "STAR", 
		"DIV", "MOD", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "GREATER_EQ", "LESS_EQ", 
		"AND_LOGIC", "OR_LOGIC", "NOT_LOGIC", "INT_LIT", "IDENTIFIER", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static gramaticaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,183,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
		1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
		1,25,1,25,1,26,1,26,1,27,4,27,141,8,27,11,27,12,27,142,1,28,1,28,5,28,
		147,8,28,10,28,12,28,150,9,28,1,29,4,29,153,8,29,11,29,12,29,154,1,29,
		1,29,1,30,1,30,1,30,1,30,5,30,163,8,30,10,30,12,30,166,9,30,1,30,1,30,
		1,31,1,31,1,31,1,31,5,31,174,8,31,10,31,12,31,177,9,31,1,31,1,31,1,31,
		1,31,1,31,1,175,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,5,1,0,48,
		57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,
		32,32,2,0,10,10,13,13,187,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,1,65,1,0,0,0,3,69,1,0,0,0,5,72,1,0,0,0,7,77,1,0,0,0,9,81,
		1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,
		1,0,0,0,21,99,1,0,0,0,23,101,1,0,0,0,25,103,1,0,0,0,27,105,1,0,0,0,29,
		107,1,0,0,0,31,109,1,0,0,0,33,111,1,0,0,0,35,113,1,0,0,0,37,115,1,0,0,
		0,39,118,1,0,0,0,41,121,1,0,0,0,43,123,1,0,0,0,45,125,1,0,0,0,47,128,1,
		0,0,0,49,131,1,0,0,0,51,134,1,0,0,0,53,137,1,0,0,0,55,140,1,0,0,0,57,144,
		1,0,0,0,59,152,1,0,0,0,61,158,1,0,0,0,63,169,1,0,0,0,65,66,5,118,0,0,66,
		67,5,97,0,0,67,68,5,114,0,0,68,2,1,0,0,0,69,70,5,105,0,0,70,71,5,102,0,
		0,71,4,1,0,0,0,72,73,5,101,0,0,73,74,5,108,0,0,74,75,5,115,0,0,75,76,5,
		101,0,0,76,6,1,0,0,0,77,78,5,102,0,0,78,79,5,109,0,0,79,80,5,116,0,0,80,
		8,1,0,0,0,81,82,5,80,0,0,82,83,5,114,0,0,83,84,5,105,0,0,84,85,5,110,0,
		0,85,86,5,116,0,0,86,87,5,108,0,0,87,88,5,110,0,0,88,10,1,0,0,0,89,90,
		5,46,0,0,90,12,1,0,0,0,91,92,5,40,0,0,92,14,1,0,0,0,93,94,5,41,0,0,94,
		16,1,0,0,0,95,96,5,123,0,0,96,18,1,0,0,0,97,98,5,125,0,0,98,20,1,0,0,0,
		99,100,5,59,0,0,100,22,1,0,0,0,101,102,5,44,0,0,102,24,1,0,0,0,103,104,
		5,61,0,0,104,26,1,0,0,0,105,106,5,43,0,0,106,28,1,0,0,0,107,108,5,45,0,
		0,108,30,1,0,0,0,109,110,5,42,0,0,110,32,1,0,0,0,111,112,5,47,0,0,112,
		34,1,0,0,0,113,114,5,37,0,0,114,36,1,0,0,0,115,116,5,61,0,0,116,117,5,
		61,0,0,117,38,1,0,0,0,118,119,5,33,0,0,119,120,5,61,0,0,120,40,1,0,0,0,
		121,122,5,62,0,0,122,42,1,0,0,0,123,124,5,60,0,0,124,44,1,0,0,0,125,126,
		5,62,0,0,126,127,5,61,0,0,127,46,1,0,0,0,128,129,5,60,0,0,129,130,5,61,
		0,0,130,48,1,0,0,0,131,132,5,38,0,0,132,133,5,38,0,0,133,50,1,0,0,0,134,
		135,5,124,0,0,135,136,5,124,0,0,136,52,1,0,0,0,137,138,5,33,0,0,138,54,
		1,0,0,0,139,141,7,0,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,
		0,142,143,1,0,0,0,143,56,1,0,0,0,144,148,7,1,0,0,145,147,7,2,0,0,146,145,
		1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,58,1,0,0,0,
		150,148,1,0,0,0,151,153,7,3,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,152,
		1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,6,29,0,0,157,60,1,0,0,
		0,158,159,5,47,0,0,159,160,5,47,0,0,160,164,1,0,0,0,161,163,8,4,0,0,162,
		161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,
		0,0,0,166,164,1,0,0,0,167,168,6,30,0,0,168,62,1,0,0,0,169,170,5,47,0,0,
		170,171,5,42,0,0,171,175,1,0,0,0,172,174,9,0,0,0,173,172,1,0,0,0,174,177,
		1,0,0,0,175,176,1,0,0,0,175,173,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,
		0,178,179,5,42,0,0,179,180,5,47,0,0,180,181,1,0,0,0,181,182,6,31,0,0,182,
		64,1,0,0,0,6,0,142,148,154,164,175,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
