//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from gramatica.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class gramaticaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, FMT=2, PRINTLN=3, IF=4, ELSE=5, FOR=6, SWITCH=7, CASE=8, DEFAULT=9, 
		BREAK=10, CONTINUE=11, RETURN=12, INT_TYPE=13, FLOAT64_TYPE=14, STRING_TYPE=15, 
		BOOL_TYPE=16, RUNE_TYPE=17, PUNTO=18, PARENTESIS_IZQ=19, PARENTESIS_DER=20, 
		CORCHETE_IZQ=21, CORCHETE_DER=22, PUNTO_Y_COMA=23, COMA=24, DOS_PUNTOS=25, 
		ASIGNACION=26, ASIGNACIO_INCREMENTO=27, ASIGNACIO_DECREMENTO=28, INCREMENTO=29, 
		DECREMENTO=30, PLUS=31, MINUS=32, STAR=33, DIV=34, MOD=35, IGUAL=36, DIFERENTE=37, 
		MAYOR_QUE=38, MENOR_QUE=39, MAYOR_IGUAL_QUE=40, MENOR_IGUAL_QUE=41, AND=42, 
		OR=43, NOT=44, INT_LIT=45, FLOAT_LIT=46, STRING_LIT=47, RUNE_LIT=48, IDENTIFIER=49, 
		ESPACIO_BLANCO=50, COMENTARIO_LINE=51, COMENTARIO_MULTILINEA=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"VAR", "FMT", "PRINTLN", "IF", "ELSE", "FOR", "SWITCH", "CASE", "DEFAULT", 
		"BREAK", "CONTINUE", "RETURN", "INT_TYPE", "FLOAT64_TYPE", "STRING_TYPE", 
		"BOOL_TYPE", "RUNE_TYPE", "PUNTO", "PARENTESIS_IZQ", "PARENTESIS_DER", 
		"CORCHETE_IZQ", "CORCHETE_DER", "PUNTO_Y_COMA", "COMA", "DOS_PUNTOS", 
		"ASIGNACION", "ASIGNACIO_INCREMENTO", "ASIGNACIO_DECREMENTO", "INCREMENTO", 
		"DECREMENTO", "PLUS", "MINUS", "STAR", "DIV", "MOD", "IGUAL", "DIFERENTE", 
		"MAYOR_QUE", "MENOR_QUE", "MAYOR_IGUAL_QUE", "MENOR_IGUAL_QUE", "AND", 
		"OR", "NOT", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "RUNE_LIT", "IDENTIFIER", 
		"ESPACIO_BLANCO", "COMENTARIO_LINE", "COMENTARIO_MULTILINEA"
	};


	public gramaticaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public gramaticaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'fmt'", "'Println'", "'if'", "'else'", "'for'", "'switch'", 
		"'case'", "'default'", "'break'", "'continue'", "'return'", "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'", "'.'", "'('", "')'", "'{'", "'}'", "';'", 
		"','", "':'", "'='", "'+='", "'-='", "'++'", "'--'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", 
		"'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "FMT", "PRINTLN", "IF", "ELSE", "FOR", "SWITCH", "CASE", 
		"DEFAULT", "BREAK", "CONTINUE", "RETURN", "INT_TYPE", "FLOAT64_TYPE", 
		"STRING_TYPE", "BOOL_TYPE", "RUNE_TYPE", "PUNTO", "PARENTESIS_IZQ", "PARENTESIS_DER", 
		"CORCHETE_IZQ", "CORCHETE_DER", "PUNTO_Y_COMA", "COMA", "DOS_PUNTOS", 
		"ASIGNACION", "ASIGNACIO_INCREMENTO", "ASIGNACIO_DECREMENTO", "INCREMENTO", 
		"DECREMENTO", "PLUS", "MINUS", "STAR", "DIV", "MOD", "IGUAL", "DIFERENTE", 
		"MAYOR_QUE", "MENOR_QUE", "MAYOR_IGUAL_QUE", "MENOR_IGUAL_QUE", "AND", 
		"OR", "NOT", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "RUNE_LIT", "IDENTIFIER", 
		"ESPACIO_BLANCO", "COMENTARIO_LINE", "COMENTARIO_MULTILINEA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static gramaticaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,343,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
		1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,
		1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
		1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
		1,42,1,43,1,43,1,44,4,44,270,8,44,11,44,12,44,271,1,45,4,45,275,8,45,11,
		45,12,45,276,1,45,1,45,5,45,281,8,45,10,45,12,45,284,9,45,1,46,1,46,1,
		46,1,46,5,46,290,8,46,10,46,12,46,293,9,46,1,46,1,46,1,47,1,47,1,47,1,
		47,3,47,301,8,47,1,47,1,47,1,48,1,48,5,48,307,8,48,10,48,12,48,310,9,48,
		1,49,4,49,313,8,49,11,49,12,49,314,1,49,1,49,1,50,1,50,1,50,1,50,5,50,
		323,8,50,10,50,12,50,326,9,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,334,8,
		51,10,51,12,51,337,9,51,1,51,1,51,1,51,1,51,1,51,1,335,0,52,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
		81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
		52,1,0,7,1,0,48,57,2,0,34,34,92,92,2,0,39,39,92,92,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
		352,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,109,1,0,0,0,5,113,
		1,0,0,0,7,121,1,0,0,0,9,124,1,0,0,0,11,129,1,0,0,0,13,133,1,0,0,0,15,140,
		1,0,0,0,17,145,1,0,0,0,19,153,1,0,0,0,21,159,1,0,0,0,23,168,1,0,0,0,25,
		175,1,0,0,0,27,179,1,0,0,0,29,187,1,0,0,0,31,194,1,0,0,0,33,199,1,0,0,
		0,35,204,1,0,0,0,37,206,1,0,0,0,39,208,1,0,0,0,41,210,1,0,0,0,43,212,1,
		0,0,0,45,214,1,0,0,0,47,216,1,0,0,0,49,218,1,0,0,0,51,220,1,0,0,0,53,222,
		1,0,0,0,55,225,1,0,0,0,57,228,1,0,0,0,59,231,1,0,0,0,61,234,1,0,0,0,63,
		236,1,0,0,0,65,238,1,0,0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,244,1,0,0,
		0,73,247,1,0,0,0,75,250,1,0,0,0,77,252,1,0,0,0,79,254,1,0,0,0,81,257,1,
		0,0,0,83,260,1,0,0,0,85,263,1,0,0,0,87,266,1,0,0,0,89,269,1,0,0,0,91,274,
		1,0,0,0,93,285,1,0,0,0,95,296,1,0,0,0,97,304,1,0,0,0,99,312,1,0,0,0,101,
		318,1,0,0,0,103,329,1,0,0,0,105,106,5,118,0,0,106,107,5,97,0,0,107,108,
		5,114,0,0,108,2,1,0,0,0,109,110,5,102,0,0,110,111,5,109,0,0,111,112,5,
		116,0,0,112,4,1,0,0,0,113,114,5,80,0,0,114,115,5,114,0,0,115,116,5,105,
		0,0,116,117,5,110,0,0,117,118,5,116,0,0,118,119,5,108,0,0,119,120,5,110,
		0,0,120,6,1,0,0,0,121,122,5,105,0,0,122,123,5,102,0,0,123,8,1,0,0,0,124,
		125,5,101,0,0,125,126,5,108,0,0,126,127,5,115,0,0,127,128,5,101,0,0,128,
		10,1,0,0,0,129,130,5,102,0,0,130,131,5,111,0,0,131,132,5,114,0,0,132,12,
		1,0,0,0,133,134,5,115,0,0,134,135,5,119,0,0,135,136,5,105,0,0,136,137,
		5,116,0,0,137,138,5,99,0,0,138,139,5,104,0,0,139,14,1,0,0,0,140,141,5,
		99,0,0,141,142,5,97,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,16,1,0,
		0,0,145,146,5,100,0,0,146,147,5,101,0,0,147,148,5,102,0,0,148,149,5,97,
		0,0,149,150,5,117,0,0,150,151,5,108,0,0,151,152,5,116,0,0,152,18,1,0,0,
		0,153,154,5,98,0,0,154,155,5,114,0,0,155,156,5,101,0,0,156,157,5,97,0,
		0,157,158,5,107,0,0,158,20,1,0,0,0,159,160,5,99,0,0,160,161,5,111,0,0,
		161,162,5,110,0,0,162,163,5,116,0,0,163,164,5,105,0,0,164,165,5,110,0,
		0,165,166,5,117,0,0,166,167,5,101,0,0,167,22,1,0,0,0,168,169,5,114,0,0,
		169,170,5,101,0,0,170,171,5,116,0,0,171,172,5,117,0,0,172,173,5,114,0,
		0,173,174,5,110,0,0,174,24,1,0,0,0,175,176,5,105,0,0,176,177,5,110,0,0,
		177,178,5,116,0,0,178,26,1,0,0,0,179,180,5,102,0,0,180,181,5,108,0,0,181,
		182,5,111,0,0,182,183,5,97,0,0,183,184,5,116,0,0,184,185,5,54,0,0,185,
		186,5,52,0,0,186,28,1,0,0,0,187,188,5,115,0,0,188,189,5,116,0,0,189,190,
		5,114,0,0,190,191,5,105,0,0,191,192,5,110,0,0,192,193,5,103,0,0,193,30,
		1,0,0,0,194,195,5,98,0,0,195,196,5,111,0,0,196,197,5,111,0,0,197,198,5,
		108,0,0,198,32,1,0,0,0,199,200,5,114,0,0,200,201,5,117,0,0,201,202,5,110,
		0,0,202,203,5,101,0,0,203,34,1,0,0,0,204,205,5,46,0,0,205,36,1,0,0,0,206,
		207,5,40,0,0,207,38,1,0,0,0,208,209,5,41,0,0,209,40,1,0,0,0,210,211,5,
		123,0,0,211,42,1,0,0,0,212,213,5,125,0,0,213,44,1,0,0,0,214,215,5,59,0,
		0,215,46,1,0,0,0,216,217,5,44,0,0,217,48,1,0,0,0,218,219,5,58,0,0,219,
		50,1,0,0,0,220,221,5,61,0,0,221,52,1,0,0,0,222,223,5,43,0,0,223,224,5,
		61,0,0,224,54,1,0,0,0,225,226,5,45,0,0,226,227,5,61,0,0,227,56,1,0,0,0,
		228,229,5,43,0,0,229,230,5,43,0,0,230,58,1,0,0,0,231,232,5,45,0,0,232,
		233,5,45,0,0,233,60,1,0,0,0,234,235,5,43,0,0,235,62,1,0,0,0,236,237,5,
		45,0,0,237,64,1,0,0,0,238,239,5,42,0,0,239,66,1,0,0,0,240,241,5,47,0,0,
		241,68,1,0,0,0,242,243,5,37,0,0,243,70,1,0,0,0,244,245,5,61,0,0,245,246,
		5,61,0,0,246,72,1,0,0,0,247,248,5,33,0,0,248,249,5,61,0,0,249,74,1,0,0,
		0,250,251,5,62,0,0,251,76,1,0,0,0,252,253,5,60,0,0,253,78,1,0,0,0,254,
		255,5,62,0,0,255,256,5,61,0,0,256,80,1,0,0,0,257,258,5,60,0,0,258,259,
		5,61,0,0,259,82,1,0,0,0,260,261,5,38,0,0,261,262,5,38,0,0,262,84,1,0,0,
		0,263,264,5,124,0,0,264,265,5,124,0,0,265,86,1,0,0,0,266,267,5,33,0,0,
		267,88,1,0,0,0,268,270,7,0,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,
		1,0,0,0,271,272,1,0,0,0,272,90,1,0,0,0,273,275,7,0,0,0,274,273,1,0,0,0,
		275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,282,
		5,46,0,0,279,281,7,0,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,
		0,282,283,1,0,0,0,283,92,1,0,0,0,284,282,1,0,0,0,285,291,5,34,0,0,286,
		290,8,1,0,0,287,288,5,92,0,0,288,290,9,0,0,0,289,286,1,0,0,0,289,287,1,
		0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,
		293,291,1,0,0,0,294,295,5,34,0,0,295,94,1,0,0,0,296,300,5,39,0,0,297,301,
		8,2,0,0,298,299,5,92,0,0,299,301,9,0,0,0,300,297,1,0,0,0,300,298,1,0,0,
		0,301,302,1,0,0,0,302,303,5,39,0,0,303,96,1,0,0,0,304,308,7,3,0,0,305,
		307,7,4,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,
		0,0,0,309,98,1,0,0,0,310,308,1,0,0,0,311,313,7,5,0,0,312,311,1,0,0,0,313,
		314,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,6,
		49,0,0,317,100,1,0,0,0,318,319,5,47,0,0,319,320,5,47,0,0,320,324,1,0,0,
		0,321,323,8,6,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,
		325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,6,50,0,0,328,102,1,
		0,0,0,329,330,5,47,0,0,330,331,5,42,0,0,331,335,1,0,0,0,332,334,9,0,0,
		0,333,332,1,0,0,0,334,337,1,0,0,0,335,336,1,0,0,0,335,333,1,0,0,0,336,
		338,1,0,0,0,337,335,1,0,0,0,338,339,5,42,0,0,339,340,5,47,0,0,340,341,
		1,0,0,0,341,342,6,51,0,0,342,104,1,0,0,0,11,0,271,276,282,289,291,300,
		308,314,324,335,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
